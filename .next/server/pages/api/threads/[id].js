"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/threads/[id]";
exports.ids = ["pages/api/threads/[id]"];
exports.modules = {

/***/ "@supabase/supabase-js":
/*!****************************************!*\
  !*** external "@supabase/supabase-js" ***!
  \****************************************/
/***/ ((module) => {

module.exports = require("@supabase/supabase-js");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fthreads%2F%5Bid%5D&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cthreads%5C%5Bid%5D.js&middlewareConfigBase64=e30%3D!":
/*!******************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fthreads%2F%5Bid%5D&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cthreads%5C%5Bid%5D.js&middlewareConfigBase64=e30%3D! ***!
  \******************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_threads_id_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\threads\\[id].js */ \"(api)/./pages/api/threads/[id].js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_threads_id_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_threads_id_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/threads/[id]\",\n        pathname: \"/api/threads/[id]\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_threads_id_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRnRocmVhZHMlMkYlNUJpZCU1RCZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnBhZ2VzJTVDYXBpJTVDdGhyZWFkcyU1QyU1QmlkJTVELmpzJm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNMO0FBQzFEO0FBQzJEO0FBQzNEO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQyxxREFBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyxlQUFlLHdFQUFLLENBQUMscURBQVE7QUFDcEM7QUFDTyx3QkFBd0IsZ0hBQW1CO0FBQ2xEO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vNWNoLz81ZmVjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9wYWdlc1xcXFxhcGlcXFxcdGhyZWFkc1xcXFxbaWRdLmpzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsIFwiZGVmYXVsdFwiKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsIFwiY29uZmlnXCIpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvdGhyZWFkcy9baWRdXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvdGhyZWFkcy9baWRdXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fthreads%2F%5Bid%5D&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cthreads%5C%5Bid%5D.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./lib/cache.js":
/*!**********************!*\
  !*** ./lib/cache.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearCachedTranslations: () => (/* binding */ clearCachedTranslations),\n/* harmony export */   getAllCachedTranslations: () => (/* binding */ getAllCachedTranslations),\n/* harmony export */   getCachedTranslation: () => (/* binding */ getCachedTranslation),\n/* harmony export */   setCachedTranslation: () => (/* binding */ setCachedTranslation)\n/* harmony export */ });\n// 翻訳キャッシュを管理するシンプルなユーティリティ\n// メモリ内キャッシュとしてシンプルに実装。必要に応じてRedisやSupabaseなどに置き換え可能\n// メモリ内キャッシュオブジェクト（サーバーリスタートでリセットされる）\nif (!global.translationCache) {\n    global.translationCache = {};\n}\nconst cache = global.translationCache;\n/**\r\n * キャッシュキーを生成\r\n * @param {string} sourceId - 翻訳元コンテンツのID\r\n * @param {string} field - 翻訳するフィールド名（title, bodyなど）\r\n * @param {string} targetLang - 翻訳先言語\r\n * @returns {string} キャッシュキー\r\n */ const generateCacheKey = (sourceId, field, targetLang)=>{\n    return `${sourceId}_${field}_${targetLang}`;\n};\n/**\r\n * 翻訳をキャッシュから取得\r\n * @param {string} sourceId - 翻訳元コンテンツのID\r\n * @param {string} field - 翻訳するフィールド名（title, bodyなど）\r\n * @param {string} targetLang - 翻訳先言語\r\n * @returns {string|null} キャッシュされた翻訳テキスト、なければnull\r\n */ function getCachedTranslation(sourceId, field, targetLang) {\n    const key = generateCacheKey(sourceId, field, targetLang);\n    const cached = cache[key];\n    if (cached) {\n        // キャッシュヒット数を記録（オプション）\n        cache[`${key}_hits`] = (cache[`${key}_hits`] || 0) + 1;\n    }\n    return cached || null;\n}\n/**\r\n * 翻訳をキャッシュに保存\r\n * @param {string} sourceId - 翻訳元コンテンツのID\r\n * @param {string} field - 翻訳するフィールド名（title, bodyなど）\r\n * @param {string} targetLang - 翻訳先言語\r\n * @param {string} text - 翻訳テキスト\r\n */ function setCachedTranslation(sourceId, field, targetLang, text) {\n    if (!text) return;\n    const key = generateCacheKey(sourceId, field, targetLang);\n    cache[key] = text;\n    // 最終更新時間を記録（オプション）\n    cache[`${key}_updated`] = Date.now();\n}\n/**\r\n * キャッシュ内のすべての翻訳を取得（デバッグ用）\r\n */ function getAllCachedTranslations() {\n    return {\n        ...cache\n    };\n}\n/**\r\n * 特定の条件に一致するキャッシュエントリをすべて削除\r\n * @param {object} filters - フィルター条件\r\n * @param {string} [filters.sourceId] - 特定のソースIDに関連するキャッシュのみ削除\r\n * @param {string} [filters.field] - 特定のフィールドに関連するキャッシュのみ削除\r\n * @param {string} [filters.targetLang] - 特定の言語に関連するキャッシュのみ削除\r\n */ function clearCachedTranslations(filters = {}) {\n    const { sourceId, field, targetLang } = filters;\n    Object.keys(cache).forEach((key)=>{\n        // メタデータキー（_hitsや_updatedで終わるもの）はスキップ\n        if (key.endsWith(\"_hits\") || key.endsWith(\"_updated\")) return;\n        const [keySourceId, keyField, keyLang] = key.split(\"_\");\n        // フィルター条件に基づいてキャッシュエントリを削除\n        if (sourceId && keySourceId !== sourceId || field && keyField !== field || targetLang && keyLang !== targetLang) {\n            return; // フィルター条件に一致しない場合はスキップ\n        }\n        // フィルター条件に一致する場合、キャッシュエントリとそのメタデータを削除\n        delete cache[key];\n        delete cache[`${key}_hits`];\n        delete cache[`${key}_updated`];\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvY2FjaGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLDJCQUEyQjtBQUMzQixvREFBb0Q7QUFFcEQscUNBQXFDO0FBQ3JDLElBQUksQ0FBQ0EsT0FBT0MsZ0JBQWdCLEVBQUU7SUFDNUJELE9BQU9DLGdCQUFnQixHQUFHLENBQUM7QUFDN0I7QUFFQSxNQUFNQyxRQUFRRixPQUFPQyxnQkFBZ0I7QUFFckM7Ozs7OztDQU1DLEdBQ0QsTUFBTUUsbUJBQW1CLENBQUNDLFVBQVVDLE9BQU9DO0lBQ3pDLE9BQU8sQ0FBQyxFQUFFRixTQUFTLENBQUMsRUFBRUMsTUFBTSxDQUFDLEVBQUVDLFdBQVcsQ0FBQztBQUM3QztBQUVBOzs7Ozs7Q0FNQyxHQUNNLFNBQVNDLHFCQUFxQkgsUUFBUSxFQUFFQyxLQUFLLEVBQUVDLFVBQVU7SUFDOUQsTUFBTUUsTUFBTUwsaUJBQWlCQyxVQUFVQyxPQUFPQztJQUM5QyxNQUFNRyxTQUFTUCxLQUFLLENBQUNNLElBQUk7SUFFekIsSUFBSUMsUUFBUTtRQUNWLHNCQUFzQjtRQUN0QlAsS0FBSyxDQUFDLENBQUMsRUFBRU0sSUFBSSxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUNOLEtBQUssQ0FBQyxDQUFDLEVBQUVNLElBQUksS0FBSyxDQUFDLENBQUMsSUFBSSxLQUFLO0lBQ3ZEO0lBRUEsT0FBT0MsVUFBVTtBQUNuQjtBQUVBOzs7Ozs7Q0FNQyxHQUNNLFNBQVNDLHFCQUFxQk4sUUFBUSxFQUFFQyxLQUFLLEVBQUVDLFVBQVUsRUFBRUssSUFBSTtJQUNwRSxJQUFJLENBQUNBLE1BQU07SUFFWCxNQUFNSCxNQUFNTCxpQkFBaUJDLFVBQVVDLE9BQU9DO0lBQzlDSixLQUFLLENBQUNNLElBQUksR0FBR0c7SUFDYixtQkFBbUI7SUFDbkJULEtBQUssQ0FBQyxDQUFDLEVBQUVNLElBQUksUUFBUSxDQUFDLENBQUMsR0FBR0ksS0FBS0MsR0FBRztBQUNwQztBQUVBOztDQUVDLEdBQ00sU0FBU0M7SUFDZCxPQUFPO1FBQUUsR0FBR1osS0FBSztJQUFDO0FBQ3BCO0FBRUE7Ozs7OztDQU1DLEdBQ00sU0FBU2Esd0JBQXdCQyxVQUFVLENBQUMsQ0FBQztJQUNsRCxNQUFNLEVBQUVaLFFBQVEsRUFBRUMsS0FBSyxFQUFFQyxVQUFVLEVBQUUsR0FBR1U7SUFFeENDLE9BQU9DLElBQUksQ0FBQ2hCLE9BQU9pQixPQUFPLENBQUNYLENBQUFBO1FBQ3pCLHFDQUFxQztRQUNyQyxJQUFJQSxJQUFJWSxRQUFRLENBQUMsWUFBWVosSUFBSVksUUFBUSxDQUFDLGFBQWE7UUFFdkQsTUFBTSxDQUFDQyxhQUFhQyxVQUFVQyxRQUFRLEdBQUdmLElBQUlnQixLQUFLLENBQUM7UUFFbkQsMkJBQTJCO1FBQzNCLElBQ0UsWUFBYUgsZ0JBQWdCakIsWUFDNUJDLFNBQVNpQixhQUFhakIsU0FDdEJDLGNBQWNpQixZQUFZakIsWUFDM0I7WUFDQSxRQUFRLHVCQUF1QjtRQUNqQztRQUVBLHNDQUFzQztRQUN0QyxPQUFPSixLQUFLLENBQUNNLElBQUk7UUFDakIsT0FBT04sS0FBSyxDQUFDLENBQUMsRUFBRU0sSUFBSSxLQUFLLENBQUMsQ0FBQztRQUMzQixPQUFPTixLQUFLLENBQUMsQ0FBQyxFQUFFTSxJQUFJLFFBQVEsQ0FBQyxDQUFDO0lBQ2hDO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly81Y2gvLi9saWIvY2FjaGUuanM/ZjU0MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyDnv7voqLPjgq3jg6Pjg4Pjgrfjg6XjgpLnrqHnkIbjgZnjgovjgrfjg7Pjg5fjg6vjgarjg6bjg7zjg4bjgqPjg6rjg4bjgqNcclxuLy8g44Oh44Oi44Oq5YaF44Kt44Oj44OD44K344Ol44Go44GX44Gm44K344Oz44OX44Or44Gr5a6f6KOF44CC5b+F6KaB44Gr5b+c44GY44GmUmVkaXPjgoRTdXBhYmFzZeOBquOBqeOBq+e9ruOBjeaPm+OBiOWPr+iDvVxyXG5cclxuLy8g44Oh44Oi44Oq5YaF44Kt44Oj44OD44K344Ol44Kq44OW44K444Kn44Kv44OI77yI44K144O844OQ44O844Oq44K544K/44O844OI44Gn44Oq44K744OD44OI44GV44KM44KL77yJXHJcbmlmICghZ2xvYmFsLnRyYW5zbGF0aW9uQ2FjaGUpIHtcclxuICBnbG9iYWwudHJhbnNsYXRpb25DYWNoZSA9IHt9O1xyXG59XHJcblxyXG5jb25zdCBjYWNoZSA9IGdsb2JhbC50cmFuc2xhdGlvbkNhY2hlO1xyXG5cclxuLyoqXHJcbiAqIOOCreODo+ODg+OCt+ODpeOCreODvOOCkueUn+aIkFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc291cmNlSWQgLSDnv7voqLPlhYPjgrPjg7Pjg4bjg7Pjg4Tjga5JRFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gZmllbGQgLSDnv7voqLPjgZnjgovjg5XjgqPjg7zjg6vjg4nlkI3vvIh0aXRsZSwgYm9keeOBquOBqe+8iVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFyZ2V0TGFuZyAtIOe/u+ios+WFiOiogOiqnlxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSDjgq3jg6Pjg4Pjgrfjg6Xjgq3jg7xcclxuICovXHJcbmNvbnN0IGdlbmVyYXRlQ2FjaGVLZXkgPSAoc291cmNlSWQsIGZpZWxkLCB0YXJnZXRMYW5nKSA9PiB7XHJcbiAgcmV0dXJuIGAke3NvdXJjZUlkfV8ke2ZpZWxkfV8ke3RhcmdldExhbmd9YDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiDnv7voqLPjgpLjgq3jg6Pjg4Pjgrfjg6XjgYvjgonlj5blvpdcclxuICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZUlkIC0g57+76Kiz5YWD44Kz44Oz44OG44Oz44OE44GuSURcclxuICogQHBhcmFtIHtzdHJpbmd9IGZpZWxkIC0g57+76Kiz44GZ44KL44OV44Kj44O844Or44OJ5ZCN77yIdGl0bGUsIGJvZHnjgarjganvvIlcclxuICogQHBhcmFtIHtzdHJpbmd9IHRhcmdldExhbmcgLSDnv7voqLPlhYjoqIDoqp5cclxuICogQHJldHVybnMge3N0cmluZ3xudWxsfSDjgq3jg6Pjg4Pjgrfjg6XjgZXjgozjgZ/nv7voqLPjg4bjgq3jgrnjg4jjgIHjgarjgZHjgozjgbBudWxsXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2FjaGVkVHJhbnNsYXRpb24oc291cmNlSWQsIGZpZWxkLCB0YXJnZXRMYW5nKSB7XHJcbiAgY29uc3Qga2V5ID0gZ2VuZXJhdGVDYWNoZUtleShzb3VyY2VJZCwgZmllbGQsIHRhcmdldExhbmcpO1xyXG4gIGNvbnN0IGNhY2hlZCA9IGNhY2hlW2tleV07XHJcbiAgXHJcbiAgaWYgKGNhY2hlZCkge1xyXG4gICAgLy8g44Kt44Oj44OD44K344Ol44OS44OD44OI5pWw44KS6KiY6Yyy77yI44Kq44OX44K344On44Oz77yJXHJcbiAgICBjYWNoZVtgJHtrZXl9X2hpdHNgXSA9IChjYWNoZVtgJHtrZXl9X2hpdHNgXSB8fCAwKSArIDE7XHJcbiAgfVxyXG4gIFxyXG4gIHJldHVybiBjYWNoZWQgfHwgbnVsbDtcclxufVxyXG5cclxuLyoqXHJcbiAqIOe/u+ios+OCkuOCreODo+ODg+OCt+ODpeOBq+S/neWtmFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc291cmNlSWQgLSDnv7voqLPlhYPjgrPjg7Pjg4bjg7Pjg4Tjga5JRFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gZmllbGQgLSDnv7voqLPjgZnjgovjg5XjgqPjg7zjg6vjg4nlkI3vvIh0aXRsZSwgYm9keeOBquOBqe+8iVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFyZ2V0TGFuZyAtIOe/u+ios+WFiOiogOiqnlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIOe/u+ios+ODhuOCreOCueODiFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNldENhY2hlZFRyYW5zbGF0aW9uKHNvdXJjZUlkLCBmaWVsZCwgdGFyZ2V0TGFuZywgdGV4dCkge1xyXG4gIGlmICghdGV4dCkgcmV0dXJuO1xyXG4gIFxyXG4gIGNvbnN0IGtleSA9IGdlbmVyYXRlQ2FjaGVLZXkoc291cmNlSWQsIGZpZWxkLCB0YXJnZXRMYW5nKTtcclxuICBjYWNoZVtrZXldID0gdGV4dDtcclxuICAvLyDmnIDntYLmm7TmlrDmmYLplpPjgpLoqJjpjLLvvIjjgqrjg5fjgrfjg6fjg7PvvIlcclxuICBjYWNoZVtgJHtrZXl9X3VwZGF0ZWRgXSA9IERhdGUubm93KCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDjgq3jg6Pjg4Pjgrfjg6XlhoXjga7jgZnjgbnjgabjga7nv7voqLPjgpLlj5blvpfvvIjjg4fjg5Djg4PjgrDnlKjvvIlcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRBbGxDYWNoZWRUcmFuc2xhdGlvbnMoKSB7XHJcbiAgcmV0dXJuIHsgLi4uY2FjaGUgfTtcclxufVxyXG5cclxuLyoqXHJcbiAqIOeJueWumuOBruadoeS7tuOBq+S4gOiHtOOBmeOCi+OCreODo+ODg+OCt+ODpeOCqOODs+ODiOODquOCkuOBmeOBueOBpuWJiumZpFxyXG4gKiBAcGFyYW0ge29iamVjdH0gZmlsdGVycyAtIOODleOCo+ODq+OCv+ODvOadoeS7tlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gW2ZpbHRlcnMuc291cmNlSWRdIC0g54m55a6a44Gu44K944O844K5SUTjgavplqLpgKPjgZnjgovjgq3jg6Pjg4Pjgrfjg6Xjga7jgb/liYrpmaRcclxuICogQHBhcmFtIHtzdHJpbmd9IFtmaWx0ZXJzLmZpZWxkXSAtIOeJueWumuOBruODleOCo+ODvOODq+ODieOBq+mWoumAo+OBmeOCi+OCreODo+ODg+OCt+ODpeOBruOBv+WJiumZpFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gW2ZpbHRlcnMudGFyZ2V0TGFuZ10gLSDnibnlrprjga7oqIDoqp7jgavplqLpgKPjgZnjgovjgq3jg6Pjg4Pjgrfjg6Xjga7jgb/liYrpmaRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjbGVhckNhY2hlZFRyYW5zbGF0aW9ucyhmaWx0ZXJzID0ge30pIHtcclxuICBjb25zdCB7IHNvdXJjZUlkLCBmaWVsZCwgdGFyZ2V0TGFuZyB9ID0gZmlsdGVycztcclxuICBcclxuICBPYmplY3Qua2V5cyhjYWNoZSkuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgLy8g44Oh44K/44OH44O844K/44Kt44O877yIX2hpdHPjgoRfdXBkYXRlZOOBp+e1guOCj+OCi+OCguOBru+8ieOBr+OCueOCreODg+ODl1xyXG4gICAgaWYgKGtleS5lbmRzV2l0aCgnX2hpdHMnKSB8fCBrZXkuZW5kc1dpdGgoJ191cGRhdGVkJykpIHJldHVybjtcclxuICAgIFxyXG4gICAgY29uc3QgW2tleVNvdXJjZUlkLCBrZXlGaWVsZCwga2V5TGFuZ10gPSBrZXkuc3BsaXQoJ18nKTtcclxuICAgIFxyXG4gICAgLy8g44OV44Kj44Or44K/44O85p2h5Lu244Gr5Z+644Gl44GE44Gm44Kt44Oj44OD44K344Ol44Ko44Oz44OI44Oq44KS5YmK6ZmkXHJcbiAgICBpZiAoXHJcbiAgICAgIChzb3VyY2VJZCAmJiBrZXlTb3VyY2VJZCAhPT0gc291cmNlSWQpIHx8XHJcbiAgICAgIChmaWVsZCAmJiBrZXlGaWVsZCAhPT0gZmllbGQpIHx8XHJcbiAgICAgICh0YXJnZXRMYW5nICYmIGtleUxhbmcgIT09IHRhcmdldExhbmcpXHJcbiAgICApIHtcclxuICAgICAgcmV0dXJuOyAvLyDjg5XjgqPjg6vjgr/jg7zmnaHku7bjgavkuIDoh7TjgZfjgarjgYTloLTlkIjjga/jgrnjgq3jg4Pjg5dcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8g44OV44Kj44Or44K/44O85p2h5Lu244Gr5LiA6Ie044GZ44KL5aC05ZCI44CB44Kt44Oj44OD44K344Ol44Ko44Oz44OI44Oq44Go44Gd44Gu44Oh44K/44OH44O844K/44KS5YmK6ZmkXHJcbiAgICBkZWxldGUgY2FjaGVba2V5XTtcclxuICAgIGRlbGV0ZSBjYWNoZVtgJHtrZXl9X2hpdHNgXTtcclxuICAgIGRlbGV0ZSBjYWNoZVtgJHtrZXl9X3VwZGF0ZWRgXTtcclxuICB9KTtcclxufSAiXSwibmFtZXMiOlsiZ2xvYmFsIiwidHJhbnNsYXRpb25DYWNoZSIsImNhY2hlIiwiZ2VuZXJhdGVDYWNoZUtleSIsInNvdXJjZUlkIiwiZmllbGQiLCJ0YXJnZXRMYW5nIiwiZ2V0Q2FjaGVkVHJhbnNsYXRpb24iLCJrZXkiLCJjYWNoZWQiLCJzZXRDYWNoZWRUcmFuc2xhdGlvbiIsInRleHQiLCJEYXRlIiwibm93IiwiZ2V0QWxsQ2FjaGVkVHJhbnNsYXRpb25zIiwiY2xlYXJDYWNoZWRUcmFuc2xhdGlvbnMiLCJmaWx0ZXJzIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJlbmRzV2l0aCIsImtleVNvdXJjZUlkIiwia2V5RmllbGQiLCJrZXlMYW5nIiwic3BsaXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./lib/cache.js\n");

/***/ }),

/***/ "(api)/./lib/dataStore.js":
/*!**************************!*\
  !*** ./lib/dataStore.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addPost: () => (/* binding */ addPost),\n/* harmony export */   addThread: () => (/* binding */ addThread),\n/* harmony export */   debugDataStore: () => (/* binding */ debugDataStore),\n/* harmony export */   getThreadWithPosts: () => (/* binding */ getThreadWithPosts),\n/* harmony export */   postsStore: () => (/* binding */ postsStore),\n/* harmony export */   threadsStore: () => (/* binding */ threadsStore)\n/* harmony export */ });\n/**\r\n * サーバーサイドで共有するデータストア\r\n * Next.jsの開発サーバーでAPIエンドポイント間でデータを共有するために使用\r\n */ // グローバル変数として保存するためのヘルパー\nif (!global.threadsStore) {\n    global.threadsStore = [\n        {\n            thread_id: \"1\",\n            title: \"サンプルスレッド1\",\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString(),\n            language: \"ja\"\n        },\n        {\n            thread_id: \"2\",\n            title: \"サンプルスレッド2\",\n            created_at: new Date(Date.now() - 86400000).toISOString(),\n            updated_at: new Date(Date.now() - 3600000).toISOString(),\n            language: \"ja\"\n        },\n        {\n            thread_id: \"3\",\n            title: \"プログラミングについての議論\",\n            created_at: new Date(Date.now() - 172800000).toISOString(),\n            updated_at: new Date(Date.now() - 5400000).toISOString(),\n            language: \"ja\"\n        }\n    ];\n}\nif (!global.postsStore) {\n    global.postsStore = {\n        \"1\": [\n            {\n                post_id: \"1_1\",\n                thread_id: \"1\",\n                body: \"最初の投稿です\",\n                anonymous_id: \"匿名123\",\n                created_at: new Date(Date.now() - 3600000).toISOString(),\n                language: \"ja\"\n            },\n            {\n                post_id: \"1_2\",\n                thread_id: \"1\",\n                body: \"返信です\",\n                anonymous_id: \"匿名456\",\n                created_at: new Date().toISOString(),\n                language: \"ja\"\n            }\n        ],\n        \"2\": [\n            {\n                post_id: \"2_1\",\n                thread_id: \"2\",\n                body: \"別のスレッドの投稿です\",\n                anonymous_id: \"匿名789\",\n                created_at: new Date(Date.now() - 2400000).toISOString(),\n                language: \"ja\"\n            }\n        ],\n        \"3\": [\n            {\n                post_id: \"3_1\",\n                thread_id: \"3\",\n                body: \"プログラミングについて話しましょう\",\n                anonymous_id: \"匿名101\",\n                created_at: new Date(Date.now() - 172000000).toISOString(),\n                language: \"ja\"\n            }\n        ]\n    };\n}\n// スレッドデータ保存用配列をエクスポート\nconst threadsStore = global.threadsStore;\n// 投稿データ保存用オブジェクトをエクスポート\nconst postsStore = global.postsStore;\n// 新しいスレッドを追加するユーティリティ関数\nfunction addThread(thread) {\n    // 既存のスレッドを確認（重複追加防止）\n    const existingThread = threadsStore.find((t)=>t.thread_id === thread.thread_id);\n    if (!existingThread) {\n        threadsStore.push({\n            ...thread\n        }); // オブジェクトをコピーして追加\n        console.log(`スレッド追加: ID=${thread.thread_id}, タイトル=\"${thread.title}\"`);\n        console.log(\"現在のスレッド一覧:\", threadsStore.map((t)=>t.thread_id));\n    }\n}\n// 新しい投稿を追加するユーティリティ関数\nfunction addPost(threadId, post) {\n    if (!postsStore[threadId]) {\n        postsStore[threadId] = [];\n    }\n    postsStore[threadId].push({\n        id: post.post_id,\n        threadId,\n        body: post.body,\n        language: post.language,\n        createdAt: post.created_at || new Date().toISOString()\n    });\n    console.log(`投稿追加: スレッドID=${threadId}, 投稿ID=${post.post_id}`);\n}\n// デバッグ用：データストアの内容を表示\nfunction debugDataStore() {\n    console.log(\"===== データストア内容 =====\");\n    console.log(\"スレッド数:\", threadsStore.length);\n    console.log(\"スレッドID一覧:\", threadsStore.map((t)=>t.thread_id));\n    console.log(\"投稿数:\", Object.keys(postsStore).length);\n    console.log(\"==========================\");\n}\n/**\r\n * スレッドと投稿を一度に取得\r\n * @param {string} threadId - スレッドID\r\n * @returns {object|null} スレッドと投稿の情報、見つからない場合はnull\r\n */ function getThreadWithPosts(threadId) {\n    // スレッドをメモリから取得\n    const thread = threadsStore.find((t)=>t.thread_id === threadId);\n    if (!thread) {\n        console.log(`スレッド未発見: ID=${threadId}`);\n        return null;\n    }\n    // 投稿をメモリから取得\n    const posts = postsStore[threadId] || [];\n    // 投稿データを整形\n    const formattedPosts = posts.map((post)=>({\n            id: post.post_id || post.id,\n            body: post.body,\n            anonymous_id: post.anonymous_id,\n            thread_id: post.thread_id,\n            created_at: post.created_at || post.createdAt,\n            original_lang: post.language,\n            translated_to: null // 翻訳先言語（後で設定）\n        }));\n    return {\n        thread: {\n            ...thread,\n            id: thread.thread_id\n        },\n        posts: formattedPosts,\n        lang: thread.language // スレッドの言語\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q1EsZUFBZVYsS0FBS2pCLFFBQVE7WUFDNUI0QixlQUFlLEtBQUssY0FBYztRQUNwQztJQUVBLE9BQU87UUFDTHJCLFFBQVE7WUFDTixHQUFHQSxNQUFNO1lBQ1RXLElBQUlYLE9BQU9iLFNBQVM7UUFDdEI7UUFDQStCLE9BQU9DO1FBQ1BHLE1BQU10QixPQUFPUCxRQUFRLENBQUMsVUFBVTtJQUNsQztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vNWNoLy4vbGliL2RhdGFTdG9yZS5qcz81ZDFmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiDjgrXjg7zjg5Djg7zjgrXjgqTjg4njgaflhbHmnInjgZnjgovjg4fjg7zjgr/jgrnjg4jjgqJcclxuICogTmV4dC5qc+OBrumWi+eZuuOCteODvOODkOODvOOBp0FQSeOCqOODs+ODieODneOCpOODs+ODiOmWk+OBp+ODh+ODvOOCv+OCkuWFseacieOBmeOCi+OBn+OCgeOBq+S9v+eUqFxyXG4gKi9cclxuXHJcbi8vIOOCsOODreODvOODkOODq+WkieaVsOOBqOOBl+OBpuS/neWtmOOBmeOCi+OBn+OCgeOBruODmOODq+ODkeODvFxyXG5pZiAoIWdsb2JhbC50aHJlYWRzU3RvcmUpIHtcclxuICBnbG9iYWwudGhyZWFkc1N0b3JlID0gW1xyXG4gICAge1xyXG4gICAgICB0aHJlYWRfaWQ6ICcxJyxcclxuICAgICAgdGl0bGU6ICfjgrXjg7Pjg5fjg6vjgrnjg6zjg4Pjg4kxJyxcclxuICAgICAgY3JlYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxyXG4gICAgICB1cGRhdGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgIGxhbmd1YWdlOiAnamEnXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICB0aHJlYWRfaWQ6ICcyJyxcclxuICAgICAgdGl0bGU6ICfjgrXjg7Pjg5fjg6vjgrnjg6zjg4Pjg4kyJyxcclxuICAgICAgY3JlYXRlZF9hdDogbmV3IERhdGUoRGF0ZS5ub3coKSAtIDg2NDAwMDAwKS50b0lTT1N0cmluZygpLFxyXG4gICAgICB1cGRhdGVkX2F0OiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gMzYwMDAwMCkudG9JU09TdHJpbmcoKSxcclxuICAgICAgbGFuZ3VhZ2U6ICdqYSdcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIHRocmVhZF9pZDogJzMnLFxyXG4gICAgICB0aXRsZTogJ+ODl+ODreOCsOODqeODn+ODs+OCsOOBq+OBpOOBhOOBpuOBruitsOirlicsXHJcbiAgICAgIGNyZWF0ZWRfYXQ6IG5ldyBEYXRlKERhdGUubm93KCkgLSAxNzI4MDAwMDApLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgIHVwZGF0ZWRfYXQ6IG5ldyBEYXRlKERhdGUubm93KCkgLSA1NDAwMDAwKS50b0lTT1N0cmluZygpLFxyXG4gICAgICBsYW5ndWFnZTogJ2phJ1xyXG4gICAgfVxyXG4gIF07XHJcbn1cclxuXHJcbmlmICghZ2xvYmFsLnBvc3RzU3RvcmUpIHtcclxuICBnbG9iYWwucG9zdHNTdG9yZSA9IHtcclxuICAgICcxJzogW1xyXG4gICAgICB7XHJcbiAgICAgICAgcG9zdF9pZDogJzFfMScsXHJcbiAgICAgICAgdGhyZWFkX2lkOiAnMScsXHJcbiAgICAgICAgYm9keTogJ+acgOWIneOBruaKleeov+OBp+OBmScsXHJcbiAgICAgICAgYW5vbnltb3VzX2lkOiAn5Yy/5ZCNMTIzJyxcclxuICAgICAgICBjcmVhdGVkX2F0OiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gMzYwMDAwMCkudG9JU09TdHJpbmcoKSxcclxuICAgICAgICBsYW5ndWFnZTogJ2phJ1xyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgcG9zdF9pZDogJzFfMicsXHJcbiAgICAgICAgdGhyZWFkX2lkOiAnMScsXHJcbiAgICAgICAgYm9keTogJ+i/lOS/oeOBp+OBmScsXHJcbiAgICAgICAgYW5vbnltb3VzX2lkOiAn5Yy/5ZCNNDU2JyxcclxuICAgICAgICBjcmVhdGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgICAgbGFuZ3VhZ2U6ICdqYSdcclxuICAgICAgfVxyXG4gICAgXSxcclxuICAgICcyJzogW1xyXG4gICAgICB7XHJcbiAgICAgICAgcG9zdF9pZDogJzJfMScsXHJcbiAgICAgICAgdGhyZWFkX2lkOiAnMicsXHJcbiAgICAgICAgYm9keTogJ+WIpeOBruOCueODrOODg+ODieOBruaKleeov+OBp+OBmScsXHJcbiAgICAgICAgYW5vbnltb3VzX2lkOiAn5Yy/5ZCNNzg5JyxcclxuICAgICAgICBjcmVhdGVkX2F0OiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gMjQwMDAwMCkudG9JU09TdHJpbmcoKSxcclxuICAgICAgICBsYW5ndWFnZTogJ2phJ1xyXG4gICAgICB9XHJcbiAgICBdLFxyXG4gICAgJzMnOiBbXHJcbiAgICAgIHtcclxuICAgICAgICBwb3N0X2lkOiAnM18xJyxcclxuICAgICAgICB0aHJlYWRfaWQ6ICczJyxcclxuICAgICAgICBib2R5OiAn44OX44Ot44Kw44Op44Of44Oz44Kw44Gr44Gk44GE44Gm6Kmx44GX44G+44GX44KH44GGJyxcclxuICAgICAgICBhbm9ueW1vdXNfaWQ6ICfljL/lkI0xMDEnLFxyXG4gICAgICAgIGNyZWF0ZWRfYXQ6IG5ldyBEYXRlKERhdGUubm93KCkgLSAxNzIwMDAwMDApLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgICAgbGFuZ3VhZ2U6ICdqYSdcclxuICAgICAgfVxyXG4gICAgXVxyXG4gIH07XHJcbn1cclxuXHJcbi8vIOOCueODrOODg+ODieODh+ODvOOCv+S/neWtmOeUqOmFjeWIl+OCkuOCqOOCr+OCueODneODvOODiFxyXG5leHBvcnQgY29uc3QgdGhyZWFkc1N0b3JlID0gZ2xvYmFsLnRocmVhZHNTdG9yZTtcclxuXHJcbi8vIOaKleeov+ODh+ODvOOCv+S/neWtmOeUqOOCquODluOCuOOCp+OCr+ODiOOCkuOCqOOCr+OCueODneODvOODiFxyXG5leHBvcnQgY29uc3QgcG9zdHNTdG9yZSA9IGdsb2JhbC5wb3N0c1N0b3JlO1xyXG5cclxuLy8g5paw44GX44GE44K544Os44OD44OJ44KS6L+95Yqg44GZ44KL44Om44O844OG44Kj44Oq44OG44Kj6Zai5pWwXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGRUaHJlYWQodGhyZWFkKSB7XHJcbiAgLy8g5pei5a2Y44Gu44K544Os44OD44OJ44KS56K66KqN77yI6YeN6KSH6L+95Yqg6Ziy5q2i77yJXHJcbiAgY29uc3QgZXhpc3RpbmdUaHJlYWQgPSB0aHJlYWRzU3RvcmUuZmluZCh0ID0+IHQudGhyZWFkX2lkID09PSB0aHJlYWQudGhyZWFkX2lkKTtcclxuICBpZiAoIWV4aXN0aW5nVGhyZWFkKSB7XHJcbiAgICB0aHJlYWRzU3RvcmUucHVzaCh7Li4udGhyZWFkfSk7IC8vIOOCquODluOCuOOCp+OCr+ODiOOCkuOCs+ODlOODvOOBl+OBpui/veWKoFxyXG4gICAgY29uc29sZS5sb2coYOOCueODrOODg+ODiei/veWKoDogSUQ9JHt0aHJlYWQudGhyZWFkX2lkfSwg44K/44Kk44OI44OrPVwiJHt0aHJlYWQudGl0bGV9XCJgKTtcclxuICAgIGNvbnNvbGUubG9nKCfnj77lnKjjga7jgrnjg6zjg4Pjg4nkuIDopqc6JywgdGhyZWFkc1N0b3JlLm1hcCh0ID0+IHQudGhyZWFkX2lkKSk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyDmlrDjgZfjgYTmipXnqL/jgpLov73liqDjgZnjgovjg6bjg7zjg4bjgqPjg6rjg4bjgqPplqLmlbBcclxuZXhwb3J0IGZ1bmN0aW9uIGFkZFBvc3QodGhyZWFkSWQsIHBvc3QpIHtcclxuICBpZiAoIXBvc3RzU3RvcmVbdGhyZWFkSWRdKSB7XHJcbiAgICBwb3N0c1N0b3JlW3RocmVhZElkXSA9IFtdO1xyXG4gIH1cclxuICBwb3N0c1N0b3JlW3RocmVhZElkXS5wdXNoKHtcclxuICAgIGlkOiBwb3N0LnBvc3RfaWQsXHJcbiAgICB0aHJlYWRJZCxcclxuICAgIGJvZHk6IHBvc3QuYm9keSxcclxuICAgIGxhbmd1YWdlOiBwb3N0Lmxhbmd1YWdlLFxyXG4gICAgY3JlYXRlZEF0OiBwb3N0LmNyZWF0ZWRfYXQgfHwgbmV3IERhdGUoKS50b0lTT1N0cmluZygpXHJcbiAgfSk7XHJcbiAgY29uc29sZS5sb2coYOaKleeov+i/veWKoDog44K544Os44OD44OJSUQ9JHt0aHJlYWRJZH0sIOaKleeov0lEPSR7cG9zdC5wb3N0X2lkfWApO1xyXG59XHJcblxyXG4vLyDjg4fjg5Djg4PjgrDnlKjvvJrjg4fjg7zjgr/jgrnjg4jjgqLjga7lhoXlrrnjgpLooajnpLpcclxuZXhwb3J0IGZ1bmN0aW9uIGRlYnVnRGF0YVN0b3JlKCkge1xyXG4gIGNvbnNvbGUubG9nKCc9PT09PSDjg4fjg7zjgr/jgrnjg4jjgqLlhoXlrrkgPT09PT0nKTtcclxuICBjb25zb2xlLmxvZygn44K544Os44OD44OJ5pWwOicsIHRocmVhZHNTdG9yZS5sZW5ndGgpO1xyXG4gIGNvbnNvbGUubG9nKCfjgrnjg6zjg4Pjg4lJROS4gOimpzonLCB0aHJlYWRzU3RvcmUubWFwKHQgPT4gdC50aHJlYWRfaWQpKTtcclxuICBjb25zb2xlLmxvZygn5oqV56i/5pWwOicsIE9iamVjdC5rZXlzKHBvc3RzU3RvcmUpLmxlbmd0aCk7XHJcbiAgY29uc29sZS5sb2coJz09PT09PT09PT09PT09PT09PT09PT09PT09Jyk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDjgrnjg6zjg4Pjg4njgajmipXnqL/jgpLkuIDluqbjgavlj5blvpdcclxuICogQHBhcmFtIHtzdHJpbmd9IHRocmVhZElkIC0g44K544Os44OD44OJSURcclxuICogQHJldHVybnMge29iamVjdHxudWxsfSDjgrnjg6zjg4Pjg4njgajmipXnqL/jga7mg4XloLHjgIHopovjgaTjgYvjgonjgarjgYTloLTlkIjjga9udWxsXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGhyZWFkV2l0aFBvc3RzKHRocmVhZElkKSB7XHJcbiAgLy8g44K544Os44OD44OJ44KS44Oh44Oi44Oq44GL44KJ5Y+W5b6XXHJcbiAgY29uc3QgdGhyZWFkID0gdGhyZWFkc1N0b3JlLmZpbmQodCA9PiB0LnRocmVhZF9pZCA9PT0gdGhyZWFkSWQpO1xyXG4gIFxyXG4gIGlmICghdGhyZWFkKSB7XHJcbiAgICBjb25zb2xlLmxvZyhg44K544Os44OD44OJ5pyq55m66KaLOiBJRD0ke3RocmVhZElkfWApO1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG4gIFxyXG4gIC8vIOaKleeov+OCkuODoeODouODquOBi+OCieWPluW+l1xyXG4gIGNvbnN0IHBvc3RzID0gcG9zdHNTdG9yZVt0aHJlYWRJZF0gfHwgW107XHJcbiAgXHJcbiAgLy8g5oqV56i/44OH44O844K/44KS5pW05b2iXHJcbiAgY29uc3QgZm9ybWF0dGVkUG9zdHMgPSBwb3N0cy5tYXAocG9zdCA9PiAoe1xyXG4gICAgaWQ6IHBvc3QucG9zdF9pZCB8fCBwb3N0LmlkLFxyXG4gICAgYm9keTogcG9zdC5ib2R5LFxyXG4gICAgYW5vbnltb3VzX2lkOiBwb3N0LmFub255bW91c19pZCxcclxuICAgIHRocmVhZF9pZDogcG9zdC50aHJlYWRfaWQsXHJcbiAgICBjcmVhdGVkX2F0OiBwb3N0LmNyZWF0ZWRfYXQgfHwgcG9zdC5jcmVhdGVkQXQsXHJcbiAgICBvcmlnaW5hbF9sYW5nOiBwb3N0Lmxhbmd1YWdlLCAvLyDlhYPjga7oqIDoqp7jgpLkv53mjIFcclxuICAgIHRyYW5zbGF0ZWRfdG86IG51bGwgLy8g57+76Kiz5YWI6KiA6Kqe77yI5b6M44Gn6Kit5a6a77yJXHJcbiAgfSkpO1xyXG4gIFxyXG4gIHJldHVybiB7XHJcbiAgICB0aHJlYWQ6IHtcclxuICAgICAgLi4udGhyZWFkLFxyXG4gICAgICBpZDogdGhyZWFkLnRocmVhZF9pZFxyXG4gICAgfSxcclxuICAgIHBvc3RzOiBmb3JtYXR0ZWRQb3N0cyxcclxuICAgIGxhbmc6IHRocmVhZC5sYW5ndWFnZSAvLyDjgrnjg6zjg4Pjg4njga7oqIDoqp5cclxuICB9O1xyXG59ICJdLCJuYW1lcyI6WyJnbG9iYWwiLCJ0aHJlYWRzU3RvcmUiLCJ0aHJlYWRfaWQiLCJ0aXRsZSIsImNyZWF0ZWRfYXQiLCJEYXRlIiwidG9JU09TdHJpbmciLCJ1cGRhdGVkX2F0IiwibGFuZ3VhZ2UiLCJub3ciLCJwb3N0c1N0b3JlIiwicG9zdF9pZCIsImJvZHkiLCJhbm9ueW1vdXNfaWQiLCJhZGRUaHJlYWQiLCJ0aHJlYWQiLCJleGlzdGluZ1RocmVhZCIsImZpbmQiLCJ0IiwicHVzaCIsImNvbnNvbGUiLCJsb2ciLCJtYXAiLCJhZGRQb3N0IiwidGhyZWFkSWQiLCJwb3N0IiwiaWQiLCJjcmVhdGVkQXQiLCJkZWJ1Z0RhdGFTdG9yZSIsImxlbmd0aCIsIk9iamVjdCIsImtleXMiLCJnZXRUaHJlYWRXaXRoUG9zdHMiLCJwb3N0cyIsImZvcm1hdHRlZFBvc3RzIiwib3JpZ2luYWxfbGFuZyIsInRyYW5zbGF0ZWRfdG8iLCJsYW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./lib/dataStore.js\n");

/***/ }),

/***/ "(api)/./lib/deepl.js":
/*!**********************!*\
  !*** ./lib/deepl.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ deepl)\n/* harmony export */ });\n/**\r\n * DeepL API を呼び出し、翻訳済みテキストを返します。\r\n * 必ず .env.local に DEEPL_API_KEY=xxxxxxxx を設定してください。\r\n * @param {string} text        翻訳したい原文\r\n * @param {string} targetLang  例: 'EN', 'JA' など（大文字2文字）\r\n * @param {string} sourceLang  任意：原文言語 例:'JA'（空なら自動判定）\r\n * @returns {Promise<string>}  翻訳後テキスト（失敗時は原文を返す）\r\n */ async function deepl(text, targetLang, sourceLang = \"\") {\n    try {\n        if (!text || text.trim() === \"\") {\n            console.log(\"空のテキストが渡されました。原文を返します。\");\n            return text;\n        }\n        const apiKey = \"3b6926d8-d7fe-0ab5-a139-58078d395af5:fx\";\n        if (!apiKey) {\n            console.error(\"DeepL API キーが設定されていません。環境変数 DEEPL_API_KEY を確認してください。\");\n            return text;\n        }\n        // 言語コードの正規化\n        const normalizedTargetLang = targetLang.toUpperCase();\n        const normalizedSourceLang = sourceLang ? sourceLang.toUpperCase() : \"\";\n        // 同じ言語の場合は翻訳せずに返す\n        if (normalizedSourceLang && normalizedSourceLang === normalizedTargetLang) {\n            console.log(`同じ言語 (${normalizedSourceLang}) なので翻訳をスキップします。`);\n            return text;\n        }\n        // 辞書による簡易翻訳チェック (短い単語の場合)\n        if (text.length < 10) {\n            const simpleDictionary = {\n                \"犬\": {\n                    EN: \"dog\",\n                    JA: \"犬\"\n                },\n                \"猫\": {\n                    EN: \"cat\",\n                    JA: \"猫\"\n                },\n                \"dog\": {\n                    EN: \"dog\",\n                    JA: \"犬\"\n                },\n                \"cat\": {\n                    EN: \"cat\",\n                    JA: \"猫\"\n                }\n            };\n            const dictEntry = simpleDictionary[text.trim()];\n            if (dictEntry && dictEntry[normalizedTargetLang]) {\n                console.log(`辞書による翻訳: ${text} → ${dictEntry[normalizedTargetLang]}`);\n                return dictEntry[normalizedTargetLang];\n            }\n        }\n        // リクエストパラメータ\n        const params = new URLSearchParams();\n        params.append(\"auth_key\", apiKey);\n        params.append(\"text\", text);\n        params.append(\"target_lang\", normalizedTargetLang);\n        // ソース言語が指定されている場合のみ追加\n        // 重要: 同じ言語間の翻訳を避けるため、ソース言語を明示的に設定\n        if (normalizedSourceLang) {\n            params.append(\"source_lang\", normalizedSourceLang);\n        }\n        // 翻訳文のフォーマット保持設定（日本語→英語の場合は保持しない）\n        const isJaToEn = normalizedSourceLang === \"JA\" && normalizedTargetLang === \"EN\" || !normalizedSourceLang && /[\\u3040-\\u30FF\\u4E00-\\u9FFF]/.test(text) && normalizedTargetLang === \"EN\";\n        if (!isJaToEn) {\n            params.append(\"preserve_formatting\", \"1\");\n        }\n        // リクエスト送信\n        console.log(`DeepL API リクエスト: ${normalizedSourceLang || \"自動検出\"} → ${normalizedTargetLang} \"${text.slice(0, 30)}...\"`);\n        const response = await fetch(\"https://api-free.deepl.com/v2/translate\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\",\n                \"User-Agent\": \"5ch-board/1.0\"\n            },\n            body: params\n        });\n        // レスポンスチェック\n        if (!response.ok) {\n            const errorText = await response.text().catch(()=>\"\");\n            throw new Error(`DeepL API エラー: ${response.status} ${response.statusText} ${errorText}`);\n        }\n        // レスポンス解析\n        const data = await response.json();\n        if (!data.translations || data.translations.length === 0) {\n            console.warn(\"DeepL API: 翻訳結果が空です。\", {\n                text,\n                targetLang\n            });\n            return text;\n        }\n        const translatedText = data.translations[0].text;\n        const detectedSourceLang = data.translations[0].detected_source_language;\n        // 翻訳結果の検証 - 入力と出力が同じで言語が異なる場合はおかしい\n        if (translatedText.trim() === text.trim() && detectedSourceLang && normalizedTargetLang !== detectedSourceLang) {\n            console.warn(\"翻訳結果が元のテキストと同じです。2回目の試行を行います。\", {\n                detected: detectedSourceLang,\n                target: normalizedTargetLang\n            });\n            // 2回目の試行 - ソース言語を明示的に設定して再試行\n            const retryParams = new URLSearchParams();\n            retryParams.append(\"auth_key\", apiKey);\n            retryParams.append(\"text\", text);\n            retryParams.append(\"target_lang\", normalizedTargetLang);\n            retryParams.append(\"source_lang\", detectedSourceLang);\n            retryParams.append(\"preserve_formatting\", \"0\"); // フォーマット保持しない\n            const retryResponse = await fetch(\"https://api-free.deepl.com/v2/translate\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/x-www-form-urlencoded\"\n                },\n                body: retryParams\n            });\n            if (retryResponse.ok) {\n                const retryData = await retryResponse.json();\n                if (retryData.translations && retryData.translations.length > 0) {\n                    const retryText = retryData.translations[0].text;\n                    if (retryText.trim() !== text.trim()) {\n                        console.log(`再試行成功: \"${text.slice(0, 20)}...\" → \"${retryText.slice(0, 20)}...\"`);\n                        return retryText;\n                    }\n                }\n            }\n            // 万が一それでも同じなら、簡易翻訳を試す（特定の単語のみ）\n            if (/^[a-zA-Z\\s]+$/.test(text) && normalizedTargetLang === \"JA\") {\n                // 英語→日本語の簡易辞書\n                const enToJa = {\n                    \"dog\": \"犬\",\n                    \"cat\": \"猫\",\n                    \"hello\": \"こんにちは\",\n                    \"good morning\": \"おはようございます\",\n                    \"thank you\": \"ありがとう\",\n                    \"yes\": \"はい\",\n                    \"no\": \"いいえ\"\n                };\n                const lowerText = text.toLowerCase().trim();\n                if (enToJa[lowerText]) {\n                    console.log(`簡易辞書翻訳: ${text} → ${enToJa[lowerText]}`);\n                    return enToJa[lowerText];\n                }\n            } else if (/[\\u3040-\\u30FF\\u4E00-\\u9FFF]/.test(text) && normalizedTargetLang === \"EN\") {\n                // 日本語→英語の簡易辞書\n                const jaToEn = {\n                    \"犬\": \"dog\",\n                    \"猫\": \"cat\",\n                    \"こんにちは\": \"hello\",\n                    \"おはようございます\": \"good morning\",\n                    \"ありがとう\": \"thank you\",\n                    \"はい\": \"yes\",\n                    \"いいえ\": \"no\"\n                };\n                if (jaToEn[text.trim()]) {\n                    console.log(`簡易辞書翻訳: ${text} → ${jaToEn[text.trim()]}`);\n                    return jaToEn[text.trim()];\n                }\n            }\n        }\n        // デバッグログ\n        console.log(`DeepL翻訳: ${detectedSourceLang} → ${normalizedTargetLang}`, text.slice(0, 20), \"→\", translatedText.slice(0, 20));\n        return translatedText;\n    } catch (err) {\n        console.error(\"[deepl] 翻訳エラー:\", err.message, {\n            text: text.slice(0, 50),\n            targetLang\n        });\n        // ネットワークエラーの場合はフラグを立てて、後でリトライできるようにする\n        if (err.name === \"TypeError\" || err.name === \"NetworkError\" || err.message.includes(\"network\")) {\n            console.error(\"[deepl] ネットワークエラーが発生しました。後でリトライします。\");\n        }\n        return text; // 失敗した場合は原文を返す\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/deepl.js\n");

/***/ }),

/***/ "(api)/./lib/langUtil.js":
/*!*************************!*\
  !*** ./lib/langUtil.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   detectLang: () => (/* binding */ detectLang),\n/* harmony export */   dictionaryLookup: () => (/* binding */ dictionaryLookup),\n/* harmony export */   manualDict: () => (/* binding */ manualDict),\n/* harmony export */   mapLang: () => (/* binding */ mapLang),\n/* harmony export */   oppositeLang: () => (/* binding */ oppositeLang)\n/* harmony export */ });\n// ── 言語ユーティリティ ────────────────────────────────\nconst jaChar = /[\\u3000-\\u303F\\u3040-\\u309F\\u30A0-\\u30FF\\u4E00-\\u9FFF]/;\nconst detectLang = (t = \"\")=>jaChar.test(t) ? \"JA\" : \"EN\";\nconst oppositeLang = (l)=>l === \"JA\" ? \"EN\" : \"JA\";\nconst mapLang = (l = \"\")=>l.toLowerCase().startsWith(\"en\") ? \"EN\" : l.toLowerCase().startsWith(\"ja\") ? \"JA\" : l.toUpperCase();\nconst manualDict = {\n    \"犬\": \"dog\",\n    \"猫\": \"cat\",\n    \"dog\": \"犬\",\n    \"cat\": \"猫\"\n};\nconst dictionaryLookup = (text, target)=>{\n    const hit = manualDict[text.trim()];\n    if (!hit) return null;\n    return target === \"EN\" ? hit : Object.keys(manualDict).find((k)=>manualDict[k] === text.trim()) || null;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvbGFuZ1V0aWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxnREFBZ0Q7QUFDaEQsTUFBTUEsU0FBUztBQUNSLE1BQU1DLGFBQWEsQ0FBQ0MsSUFBSSxFQUFFLEdBQU1GLE9BQU9HLElBQUksQ0FBQ0QsS0FBSyxPQUFPLEtBQU07QUFDOUQsTUFBTUUsZUFBZSxDQUFDQyxJQUFPQSxNQUFNLE9BQU8sT0FBTyxLQUFNO0FBQ3ZELE1BQU1DLFVBQVUsQ0FBQ0QsSUFBSSxFQUFFLEdBQzVCQSxFQUFFRSxXQUFXLEdBQUdDLFVBQVUsQ0FBQyxRQUFRLE9BQ2pDSCxFQUFFRSxXQUFXLEdBQUdDLFVBQVUsQ0FBQyxRQUFRLE9BQ25DSCxFQUFFSSxXQUFXLEdBQUc7QUFFYixNQUFNQyxhQUFhO0lBQ3hCLEtBQUs7SUFBUSxLQUFLO0lBQ2xCLE9BQU87SUFBTSxPQUFPO0FBQ3RCLEVBQUU7QUFFSyxNQUFNQyxtQkFBbUIsQ0FBQ0MsTUFBTUM7SUFDckMsTUFBTUMsTUFBTUosVUFBVSxDQUFDRSxLQUFLRyxJQUFJLEdBQUc7SUFDbkMsSUFBSSxDQUFDRCxLQUFLLE9BQU87SUFDakIsT0FBT0QsV0FBVyxPQUFPQyxNQUFNRSxPQUFPQyxJQUFJLENBQUNQLFlBQ3hDUSxJQUFJLENBQUNDLENBQUFBLElBQUtULFVBQVUsQ0FBQ1MsRUFBRSxLQUFLUCxLQUFLRyxJQUFJLE9BQU87QUFDakQsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovLzVjaC8uL2xpYi9sYW5nVXRpbC5qcz9mMTM4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIOKUgOKUgCDoqIDoqp7jg6bjg7zjg4bjgqPjg6rjg4bjgqMg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAXHJcbmNvbnN0IGphQ2hhciA9IC9bXFx1MzAwMC1cXHUzMDNGXFx1MzA0MC1cXHUzMDlGXFx1MzBBMC1cXHUzMEZGXFx1NEUwMC1cXHU5RkZGXS87XHJcbmV4cG9ydCBjb25zdCBkZXRlY3RMYW5nID0gKHQgPSAnJykgPT4gKGphQ2hhci50ZXN0KHQpID8gJ0pBJyA6ICdFTicpO1xyXG5leHBvcnQgY29uc3Qgb3Bwb3NpdGVMYW5nID0gKGwpID0+IChsID09PSAnSkEnID8gJ0VOJyA6ICdKQScpO1xyXG5leHBvcnQgY29uc3QgbWFwTGFuZyA9IChsID0gJycpID0+XHJcbiAgbC50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoJ2VuJykgPyAnRU4nXHJcbiAgOiBsLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aCgnamEnKSA/ICdKQSdcclxuICA6IGwudG9VcHBlckNhc2UoKTtcclxuXHJcbmV4cG9ydCBjb25zdCBtYW51YWxEaWN0ID0ge1xyXG4gICfniqwnOiAnZG9nJywgICfnjKsnOiAnY2F0JyxcclxuICAnZG9nJzogJ+eKrCcsICAnY2F0JzogJ+eMqycsXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZGljdGlvbmFyeUxvb2t1cCA9ICh0ZXh0LCB0YXJnZXQpID0+IHtcclxuICBjb25zdCBoaXQgPSBtYW51YWxEaWN0W3RleHQudHJpbSgpXTtcclxuICBpZiAoIWhpdCkgcmV0dXJuIG51bGw7XHJcbiAgcmV0dXJuIHRhcmdldCA9PT0gJ0VOJyA/IGhpdCA6IE9iamVjdC5rZXlzKG1hbnVhbERpY3QpXHJcbiAgICAuZmluZChrID0+IG1hbnVhbERpY3Rba10gPT09IHRleHQudHJpbSgpKSB8fCBudWxsO1xyXG59OyAiXSwibmFtZXMiOlsiamFDaGFyIiwiZGV0ZWN0TGFuZyIsInQiLCJ0ZXN0Iiwib3Bwb3NpdGVMYW5nIiwibCIsIm1hcExhbmciLCJ0b0xvd2VyQ2FzZSIsInN0YXJ0c1dpdGgiLCJ0b1VwcGVyQ2FzZSIsIm1hbnVhbERpY3QiLCJkaWN0aW9uYXJ5TG9va3VwIiwidGV4dCIsInRhcmdldCIsImhpdCIsInRyaW0iLCJPYmplY3QiLCJrZXlzIiwiZmluZCIsImsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./lib/langUtil.js\n");

/***/ }),

/***/ "(api)/./lib/supabaseClient.js":
/*!*******************************!*\
  !*** ./lib/supabaseClient.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   supabase: () => (/* binding */ supabase)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"@supabase/supabase-js\");\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__);\n\nconst url = process.env.NEXT_PUBLIC_SUPABASE_URL;\nconst key = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || process.env.SUPABASE_SERVICE_ROLE_KEY;\nconst supabase = url && key ? (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(url, key) // 本番・Preview では実接続\n : {\n    from: ()=>({\n            select: ()=>({\n                    eq: ()=>({\n                            single: async ()=>({\n                                    data: null,\n                                    error: null\n                                })\n                        })\n                }),\n            upsert: ()=>({\n                    select: ()=>({\n                            single: async ()=>({\n                                    data: null,\n                                    error: null\n                                })\n                        })\n                }),\n            insert: ()=>({\n                    select: ()=>({\n                            single: async ()=>({\n                                    data: null,\n                                    error: null\n                                })\n                        })\n                })\n        }),\n    channel: ()=>({\n            on: ()=>({\n                    subscribe: ()=>({\n                            unsubscribe: ()=>{}\n                        })\n                })\n        })\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvc3VwYWJhc2VDbGllbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFEO0FBRXJELE1BQU1DLE1BQU1DLFFBQVFDLEdBQUcsQ0FBQ0Msd0JBQXdCO0FBQ2hELE1BQU1DLE1BQ0pILFFBQVFDLEdBQUcsQ0FBQ0csNkJBQTZCLElBQ3pDSixRQUFRQyxHQUFHLENBQUNJLHlCQUF5QjtBQUVoQyxNQUFNQyxXQUNYUCxPQUFPSSxNQUNITCxtRUFBWUEsQ0FBQ0MsS0FBS0ksS0FBWSxtQkFBbUI7R0FDakQ7SUFDRUksTUFBTSxJQUFPO1lBQ1hDLFFBQVEsSUFBTztvQkFBRUMsSUFBSSxJQUFPOzRCQUFFQyxRQUFRLFVBQWE7b0NBQUVDLE1BQU07b0NBQU1DLE9BQU87Z0NBQUs7d0JBQUc7Z0JBQUc7WUFDbkZDLFFBQVEsSUFBTztvQkFDYkwsUUFBUSxJQUFPOzRCQUFFRSxRQUFRLFVBQWE7b0NBQUVDLE1BQU07b0NBQU1DLE9BQU87Z0NBQUs7d0JBQUc7Z0JBQ3JFO1lBQ0FFLFFBQVEsSUFBTztvQkFBRU4sUUFBUSxJQUFPOzRCQUFFRSxRQUFRLFVBQWE7b0NBQUVDLE1BQU07b0NBQU1DLE9BQU87Z0NBQUs7d0JBQUc7Z0JBQUc7UUFDekY7SUFDQUcsU0FBUyxJQUFPO1lBQUVDLElBQUksSUFBTztvQkFBRUMsV0FBVyxJQUFPOzRCQUFFQyxhQUFhLEtBQU87d0JBQUU7Z0JBQUc7UUFBRztBQUNqRixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vNWNoLy4vbGliL3N1cGFiYXNlQ2xpZW50LmpzPzVmMGQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlQ2xpZW50IH0gZnJvbSAnQHN1cGFiYXNlL3N1cGFiYXNlLWpzJztcclxuXHJcbmNvbnN0IHVybCA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTDtcclxuY29uc3Qga2V5ID1cclxuICBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSB8fFxyXG4gIHByb2Nlc3MuZW52LlNVUEFCQVNFX1NFUlZJQ0VfUk9MRV9LRVk7XHJcblxyXG5leHBvcnQgY29uc3Qgc3VwYWJhc2UgPVxyXG4gIHVybCAmJiBrZXlcclxuICAgID8gY3JlYXRlQ2xpZW50KHVybCwga2V5KSAgICAgICAgLy8g5pys55Wq44O7UHJldmlldyDjgafjga/lrp/mjqXntppcclxuICAgIDogeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g44Ot44O844Kr44Or6ZaL55m644Gn44Gv44Oi44OD44KvXHJcbiAgICAgICAgZnJvbTogKCkgPT4gKHtcclxuICAgICAgICAgIHNlbGVjdDogKCkgPT4gKHsgZXE6ICgpID0+ICh7IHNpbmdsZTogYXN5bmMgKCkgPT4gKHsgZGF0YTogbnVsbCwgZXJyb3I6IG51bGwgfSkgfSkgfSksXHJcbiAgICAgICAgICB1cHNlcnQ6ICgpID0+ICh7XHJcbiAgICAgICAgICAgIHNlbGVjdDogKCkgPT4gKHsgc2luZ2xlOiBhc3luYyAoKSA9PiAoeyBkYXRhOiBudWxsLCBlcnJvcjogbnVsbCB9KSB9KSxcclxuICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgaW5zZXJ0OiAoKSA9PiAoeyBzZWxlY3Q6ICgpID0+ICh7IHNpbmdsZTogYXN5bmMgKCkgPT4gKHsgZGF0YTogbnVsbCwgZXJyb3I6IG51bGwgfSkgfSkgfSksXHJcbiAgICAgICAgfSksXHJcbiAgICAgICAgY2hhbm5lbDogKCkgPT4gKHsgb246ICgpID0+ICh7IHN1YnNjcmliZTogKCkgPT4gKHsgdW5zdWJzY3JpYmU6ICgpID0+IHt9IH0pIH0pIH0pLFxyXG4gICAgICB9OyAiXSwibmFtZXMiOlsiY3JlYXRlQ2xpZW50IiwidXJsIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCIsImtleSIsIk5FWFRfUFVCTElDX1NVUEFCQVNFX0FOT05fS0VZIiwiU1VQQUJBU0VfU0VSVklDRV9ST0xFX0tFWSIsInN1cGFiYXNlIiwiZnJvbSIsInNlbGVjdCIsImVxIiwic2luZ2xlIiwiZGF0YSIsImVycm9yIiwidXBzZXJ0IiwiaW5zZXJ0IiwiY2hhbm5lbCIsIm9uIiwic3Vic2NyaWJlIiwidW5zdWJzY3JpYmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./lib/supabaseClient.js\n");

/***/ }),

/***/ "(api)/./lib/translation.js":
/*!****************************!*\
  !*** ./lib/translation.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ensureLangCodeFormat: () => (/* binding */ ensureLangCodeFormat),\n/* harmony export */   getTranslation: () => (/* binding */ getTranslation),\n/* harmony export */   saveTranslation: () => (/* binding */ saveTranslation),\n/* harmony export */   translateText: () => (/* binding */ translateText),\n/* harmony export */   translateWithDeepL: () => (/* binding */ translateWithDeepL)\n/* harmony export */ });\n/* harmony import */ var _deepl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deepl.js */ \"(api)/./lib/deepl.js\");\n/* harmony import */ var _supabaseClient_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./supabaseClient.js */ \"(api)/./lib/supabaseClient.js\");\n/* harmony import */ var _langUtil_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./langUtil.js */ \"(api)/./lib/langUtil.js\");\n/* harmony import */ var _dataStore_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dataStore.js */ \"(api)/./lib/dataStore.js\");\n\n\n\n\n// 日本語文字を含むか簡易判定\nconst jpRegex = /[\\u3000-\\u303F\\u3040-\\u309F\\u30A0-\\u30FF\\u4E00-\\u9FFF]/;\nconst detectSourceLang = (t = \"\")=>jpRegex.test(t) ? \"JA\" : \"EN\";\n// DeepL API設定\nconst DEEPL_API_KEY = \"3b6926d8-d7fe-0ab5-a139-58078d395af5:fx\";\n/**\r\n * 言語コードを正規化する（DeepLに適した形式に変換する）\r\n * @param {string} langCode - 言語コード（ja, en, JA, EN など）\r\n * @returns {string} 正規化された言語コード（JA, ENなど）\r\n */ function ensureLangCodeFormat(langCode = \"\") {\n    if (!langCode) return \"JA\"; // デフォルト値\n    // すでに正しい形式（JA, EN）であれば、そのまま返す\n    if (langCode === \"JA\" || langCode === \"EN\") {\n        return langCode;\n    }\n    // 小文字を大文字に変換\n    return langCode.toLowerCase().startsWith(\"ja\") ? \"JA\" : langCode.toLowerCase().startsWith(\"en\") ? \"EN\" : langCode.toUpperCase(); // その他の言語コードはそのまま大文字に\n}\n/**\r\n * DeepL APIを使用してテキストを翻訳する\r\n * @param {object} params - パラメータ\r\n * @param {string|string[]} params.text - 翻訳するテキストまたはテキストの配列\r\n * @param {string} params.targetLang - ターゲット言語コード（'EN'または'JA'）\r\n * @returns {Promise<string>} - 翻訳されたテキスト\r\n */ async function translateWithDeepL({ text, targetLang }) {\n    if (!text) return \"\";\n    if (!DEEPL_API_KEY) {\n        console.error(\"DeepL API キーが設定されていません。\");\n        return Array.isArray(text) ? text[0] || \"\" : text; // APIキーがない場合は原文を返す\n    }\n    // 言語コードの正規化\n    const normalizedTargetLang = (0,_langUtil_js__WEBPACK_IMPORTED_MODULE_2__.mapLang)(targetLang);\n    // ① 前処理 ― 改行→空白・トリム・連続ピリオド整理\n    const cleaned = Array.isArray(text) ? text[0] : text;\n    const cleanedText = cleaned.replace(/\\r?\\n+/g, \" \") // 改行を半角スペースに\n    .replace(/\\.{3,}/g, \"...\") // ピリオド 3 個を超える部分は 3 個に\n    .trim();\n    if (!cleanedText) return \"\";\n    // 短いテキストの場合は辞書を使った直接翻訳を試みる\n    if (cleanedText.length < 10) {\n        const simpleDict = {\n            \"犬\": {\n                en: \"dog\",\n                ja: \"犬\"\n            },\n            \"猫\": {\n                en: \"cat\",\n                ja: \"猫\"\n            },\n            \"dog\": {\n                en: \"dog\",\n                ja: \"犬\"\n            },\n            \"cat\": {\n                en: \"cat\",\n                ja: \"猫\"\n            },\n            \"hello\": {\n                en: \"hello\",\n                ja: \"こんにちは\"\n            },\n            \"yes\": {\n                en: \"yes\",\n                ja: \"はい\"\n            },\n            \"no\": {\n                en: \"no\",\n                ja: \"いいえ\"\n            }\n        };\n        const dictKey = cleanedText.toLowerCase().trim();\n        const dictEntry = simpleDict[dictKey];\n        if (dictEntry) {\n            const targetLangCode = normalizedTargetLang.toLowerCase() === \"en\" ? \"en\" : \"ja\";\n            const translated = dictEntry[targetLangCode];\n            if (translated && translated !== cleanedText) {\n                console.log(`辞書翻訳: \"${cleanedText}\" → \"${translated}\"`);\n                return translated;\n            }\n        }\n    }\n    try {\n        // ソース言語を検出（日本語文字が含まれるかどうか）\n        const detectedSourceLang = detectSourceLang(cleanedText);\n        // 同じ言語への翻訳は避ける\n        if (detectedSourceLang.toLowerCase() === normalizedTargetLang.toLowerCase()) {\n            console.log(`同じ言語への翻訳をスキップ: ${detectedSourceLang}`);\n            return cleanedText;\n        }\n        console.log(`DeepL翻訳リクエスト: \"${cleanedText.slice(0, 20)}...\" (${detectedSourceLang} → ${normalizedTargetLang})`);\n        // DeepL API呼び出し関数（内部用）\n        async function callDeeplApi(reqText, keepFormatting = true) {\n            try {\n                // Deepl 関数を直接呼び出し\n                const results = await (0,_deepl_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(reqText, normalizedTargetLang, detectedSourceLang // ソース言語を明示的に指定\n                );\n                // 文字列として結果を返す\n                return results || reqText;\n            } catch (err) {\n                console.error(\"DeepL API 呼び出しエラー:\", err.message);\n                return reqText; // エラー時は原文を返す\n            }\n        }\n        // ① １回目の翻訳試行\n        const first = await callDeeplApi(cleanedText, true);\n        // ② 翻訳結果が原文と同じかチェック\n        if (first.trim() === cleanedText.trim()) {\n            console.log(\"翻訳結果が原文と同じです。別の方法で再試行します。\");\n            // 単語辞書で再確認\n            const dictWords = {\n                \"犬\": \"dog\",\n                \"猫\": \"cat\",\n                \"こんにちは\": \"hello\",\n                \"おはよう\": \"good morning\",\n                \"ありがとう\": \"thank you\",\n                \"dog\": \"犬\",\n                \"cat\": \"猫\",\n                \"hello\": \"こんにちは\",\n                \"good morning\": \"おはよう\",\n                \"thank you\": \"ありがとう\"\n            };\n            if (dictWords[cleanedText]) {\n                const dictResult = dictWords[cleanedText];\n                console.log(`辞書による再翻訳: \"${cleanedText}\" → \"${dictResult}\"`);\n                return dictResult;\n            }\n            // フォーマット維持なしで再試行\n            const retry = await callDeeplApi(cleanedText, false);\n            if (retry.trim() !== cleanedText.trim()) {\n                console.log(`フォーマット維持なしで翻訳成功: \"${cleanedText}\" → \"${retry}\"`);\n                return retry;\n            }\n            // それでも同じならソース言語を変えて試す最後の手段\n            const forcedSourceLang = detectedSourceLang === \"JA\" ? \"EN\" : \"JA\";\n            console.log(`最終試行: ソース言語を強制的に ${forcedSourceLang} に設定`);\n            try {\n                const results = await (0,_deepl_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(cleanedText, normalizedTargetLang, forcedSourceLang);\n                const final = results || cleanedText;\n                if (final.trim() !== cleanedText.trim()) {\n                    console.log(`最終試行成功: \"${cleanedText}\" → \"${final}\"`);\n                    return final;\n                }\n            } catch (finalError) {\n                console.error(\"最終翻訳試行エラー:\", finalError);\n            }\n            console.log(\"全ての翻訳試行が失敗しました。原文を返します。\");\n            return cleanedText;\n        }\n        console.log(`翻訳成功: \"${cleanedText.slice(0, 20)}...\" → \"${first.slice(0, 20)}...\"`);\n        return first;\n    } catch (error) {\n        console.error(\"translateWithDeepL エラー:\", error);\n        return cleanedText; // エラー時は原文を返す\n    }\n}\n/**\r\n * DeepL で翻訳し、翻訳テキストを返す\r\n * cleaned: 末尾の「...」などを除去した本文\r\n * @param {string} cleaned - 翻訳するテキスト\r\n * @param {string} targetLang - 翻訳先言語コード\r\n * @param {string|null} sourceLang - 翻訳元言語コード（オプション）\r\n * @returns {Promise<string>} - 翻訳されたテキスト（文字列）\r\n */ async function translateText(cleaned, targetLang, sourceLang = null) {\n    if (!cleaned) return \"\";\n    if (!DEEPL_API_KEY) {\n        console.error(\"DeepL API キーが設定されていません。\");\n        return cleaned; // APIキーがない場合は原文を返す\n    }\n    try {\n        // 言語コードの正規化\n        const normalizedTargetLang = (0,_langUtil_js__WEBPACK_IMPORTED_MODULE_2__.mapLang)(targetLang);\n        //   0: 全体, 1: 本体, 2: 末尾記号\n        const [, core = \"\", trailer = \"\"] = cleaned.match(/^(.*?)([\\u0021-\\u002E\\u3001-\\u303F\\uFF01-\\uFF0F\\u2026]+)?$/u) || [];\n        const text = core || cleaned.trim();\n        if (!text) return cleaned;\n        // ソース言語を検出\n        const effectiveSourceLang = sourceLang ? (0,_langUtil_js__WEBPACK_IMPORTED_MODULE_2__.mapLang)(sourceLang) : detectSourceLang(text);\n        // 同じ言語への翻訳は避ける\n        if (effectiveSourceLang.toLowerCase() === normalizedTargetLang.toLowerCase()) {\n            console.log(`同じ言語への翻訳をスキップ: ${effectiveSourceLang}`);\n            return cleaned;\n        }\n        // まず辞書検索を試す\n        const dictResult = translateWithDictionary(text, normalizedTargetLang);\n        if (dictResult) {\n            console.log(`辞書翻訳成功: \"${text.slice(0, 20)}...\" → \"${dictResult.slice(0, 20)}...\"`);\n            return dictResult + trailer;\n        }\n        // DeepL API呼び出し\n        console.log(`翻訳リクエスト: ${effectiveSourceLang} → ${normalizedTargetLang}`, text.slice(0, 20));\n        const translatedResults = await (0,_deepl_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(text, normalizedTargetLang, effectiveSourceLang);\n        // deepl関数は配列ではなく文字列を返すようになったので、そのまま使用\n        const translatedText = translatedResults || text;\n        // 翻訳結果 + 元の末尾記号を結合\n        const result = (translatedText + trailer).trim();\n        // 翻訳結果が原文と同じ場合は辞書を再確認\n        if (result.trim() === text.trim() + trailer.trim()) {\n            console.log(\"翻訳結果が原文と同じです。強制的に翻訳を試みます。\");\n            // 強制的に反対言語に設定して再試行\n            const forcedSourceLang = effectiveSourceLang === \"JA\" ? \"EN\" : \"JA\";\n            const forcedResults = await (0,_deepl_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(text, normalizedTargetLang, forcedSourceLang);\n            // 配列ではなく文字列を使用\n            const forcedResult = forcedResults || text;\n            if (forcedResult.trim() !== text.trim()) {\n                console.log(`強制翻訳成功: \"${text.slice(0, 20)}...\" → \"${forcedResult.slice(0, 20)}...\"`);\n                return (forcedResult + trailer).trim();\n            }\n            return result; // 失敗した場合はDeepLの結果をそのまま返す\n        }\n        return result;\n    } catch (error) {\n        console.error(\"translateText エラー:\", error);\n        return cleaned; // エラー時は原文を返す\n    }\n}\n/**\r\n * 簡易辞書を使った翻訳\r\n * @param {string} text - 翻訳するテキスト\r\n * @param {string} targetLang - 対象言語\r\n * @returns {string|null} - 翻訳結果、辞書にない場合はnull\r\n */ function translateWithDictionary(text, targetLang) {\n    const simpleDictionary = {\n        // 日本語→英語\n        \"犬\": \"dog\",\n        \"猫\": \"cat\",\n        \"こんにちは\": \"hello\",\n        \"おはよう\": \"good morning\",\n        \"ありがとう\": \"thank you\",\n        \"はい\": \"yes\",\n        \"いいえ\": \"no\",\n        // 英語→日本語\n        \"dog\": \"犬\",\n        \"cat\": \"猫\",\n        \"hello\": \"こんにちは\",\n        \"good morning\": \"おはよう\",\n        \"thank you\": \"ありがとう\",\n        \"yes\": \"はい\",\n        \"no\": \"いいえ\"\n    };\n    const normalizedText = text.trim().toLowerCase();\n    if (simpleDictionary[normalizedText]) {\n        const isENTarget = targetLang.toUpperCase() === \"EN\";\n        const isJAText = /[\\u3040-\\u30FF\\u4E00-\\u9FFF]/.test(normalizedText);\n        // 日本語→英語 または 英語→日本語の方向が合っている場合のみ翻訳\n        if (isENTarget && isJAText || !isENTarget && !isJAText) {\n            return simpleDictionary[normalizedText];\n        }\n    }\n    return null;\n}\n/* ------------------------------------------------------------------------\r\n * ★ 重要: saveTranslation は \"sourceId を必須\" に一本化する\r\n *   - thread でも post でも ID をそのまま sourceId に渡す\r\n *   - 呼び出し側ロジックを単純化\r\n * --------------------------------------------------------------------- */ async function saveTranslation({ sourceId, field, lang, text }) {\n    if (!sourceId || !field || !lang || !text) {\n        console.error(\"saveTranslation: 引数が不足しています\", {\n            sourceId,\n            field,\n            lang,\n            text\n        });\n        return {\n            success: false,\n            error: \"引数が不足しています\"\n        };\n    }\n    try {\n        // 言語コードの正規化\n        const normalizedLang = lang.toLowerCase();\n        const row = {\n            source_id: sourceId,\n            field,\n            language: normalizedLang,\n            translated_content: text,\n            created_at: new Date().toISOString()\n        };\n        // Supabase が null ならメモリだけで動かす\n        if (!_supabaseClient_js__WEBPACK_IMPORTED_MODULE_1__.supabase) {\n            console.log(\"翻訳保存 [mock]:\", sourceId, field, normalizedLang, text.slice(0, 20));\n            return {\n                success: true\n            };\n        }\n        const { error } = await _supabaseClient_js__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"translations\").upsert(row, {\n            onConflict: \"source_id,field,language\"\n        });\n        if (error) {\n            console.error(\"翻訳保存エラー:\", error);\n            return {\n                success: false,\n                error\n            };\n        }\n        console.log(\"翻訳保存成功:\", sourceId, field, normalizedLang, text.slice(0, 20));\n        return {\n            success: true\n        };\n    } catch (error) {\n        console.error(\"saveTranslation エラー:\", error);\n        return {\n            success: false,\n            error\n        };\n    }\n}\n/* -------------------------------------------------------------------- */ async function getTranslation(sourceId, field, lang) {\n    if (!sourceId || !field || !lang) {\n        console.error(\"getTranslation: 引数が不足しています\", {\n            sourceId,\n            field,\n            lang\n        });\n        return null;\n    }\n    try {\n        // 言語コードの正規化\n        const normalizedLang = lang.toLowerCase();\n        if (!_supabaseClient_js__WEBPACK_IMPORTED_MODULE_1__.supabase) {\n            console.log(\"翻訳取得 [mock]:\", sourceId, field, normalizedLang);\n            return null;\n        }\n        const { data, error } = await _supabaseClient_js__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"translations\").select(\"translated_content, created_at\").eq(\"source_id\", sourceId).eq(\"field\", field).eq(\"language\", normalizedLang).single();\n        if (error) {\n            // データが見つからない場合はエラーにしない\n            if (error.code === \"PGRST116\") {\n                return null;\n            }\n            console.error(\"翻訳取得エラー:\", error);\n            return null;\n        }\n        console.log(\"翻訳取得成功:\", sourceId, field, normalizedLang, data.translated_content.slice(0, 20));\n        return data.translated_content;\n    } catch (error) {\n        console.error(\"getTranslation エラー:\", error);\n        return null;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/translation.js\n");

/***/ }),

/***/ "(api)/./pages/api/threads/[id].js":
/*!***********************************!*\
  !*** ./pages/api/threads/[id].js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_supabaseClient_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/supabaseClient.js */ \"(api)/./lib/supabaseClient.js\");\n/* harmony import */ var _lib_translation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/translation.js */ \"(api)/./lib/translation.js\");\n/* harmony import */ var _lib_dataStore_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../lib/dataStore.js */ \"(api)/./lib/dataStore.js\");\n/* harmony import */ var _lib_cache_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../lib/cache.js */ \"(api)/./lib/cache.js\");\n\n\n\n\n// APIルートハンドラー実行時にデータストアの内容を確認\ntry {\n    (0,_lib_dataStore_js__WEBPACK_IMPORTED_MODULE_2__.debugDataStore)();\n} catch (error) {\n    console.error(\"データストア初期化エラー:\", error);\n}\n// 翻訳とキャッシュを扱うヘルパー関数\nasync function translateContent(text, targetLang, sourceLang, contentId, field) {\n    if (!text) {\n        console.log(`テキストが空のため翻訳スキップ (${field} ${contentId})`);\n        return text;\n    }\n    const normalizedSourceLang = sourceLang ? (0,_lib_translation_js__WEBPACK_IMPORTED_MODULE_1__.ensureLangCodeFormat)(sourceLang) : null;\n    const normalizedTargetLang = (0,_lib_translation_js__WEBPACK_IMPORTED_MODULE_1__.ensureLangCodeFormat)(targetLang);\n    if (normalizedSourceLang && normalizedSourceLang === normalizedTargetLang) {\n        // text が文字列であることを確認してから substring を使用\n        const logText = typeof text === \"string\" ? text.substring(0, 50) : \"[non-string_text]\";\n        console.log(`同じ言語への翻訳をスキップ (${field} ${contentId}): ${normalizedSourceLang} -> ${normalizedTargetLang}. Text: \"${logText}...\"`);\n        return text;\n    }\n    const cacheKeyContentId = contentId || \"unknown_content_id\";\n    const cacheKey = `${cacheKeyContentId}_${field}_${normalizedTargetLang}`;\n    const cached = (0,_lib_cache_js__WEBPACK_IMPORTED_MODULE_3__.getCachedTranslation)(cacheKeyContentId, field, normalizedTargetLang);\n    if (cached) {\n        // cached が文字列であることを確認してから substring を使用\n        const logCached = typeof cached === \"string\" ? cached.substring(0, 50) : \"[non-string_cached_value]\";\n        console.log(`キャッシュされた翻訳を使用 (${field} ${cacheKeyContentId}, Key: ${cacheKey}): ${normalizedTargetLang} -> \"${logCached}...\"`);\n        return cached;\n    }\n    const effectiveSourceLang = normalizedSourceLang;\n    // text が文字列であることを確認してから substring を使用\n    const logTextForRequest = typeof text === \"string\" ? text.substring(0, 50) : \"[non-string_text]\";\n    console.log(`DeepL翻訳リクエスト (${field} ${cacheKeyContentId}, Key: ${cacheKey}): \"${logTextForRequest}...\" (${effectiveSourceLang || \"auto\"} → ${normalizedTargetLang})`);\n    const translatedText = await (0,_lib_translation_js__WEBPACK_IMPORTED_MODULE_1__.translateText)(text, normalizedTargetLang, effectiveSourceLang);\n    if (translatedText && typeof translatedText === \"string\" && translatedText !== text) {\n        // translatedText と text が文字列であることを確認してから substring を使用\n        const logOriginalText = typeof text === \"string\" ? text.substring(0, 50) : \"[non-string_original_text]\";\n        const logTranslated = translatedText.substring(0, 50); // translatedText は文字列であることが確認済み\n        console.log(`翻訳成功・キャッシュ保存 (${field} ${cacheKeyContentId}, Key: ${cacheKey}): \"${logOriginalText}...\" → \"${logTranslated}...\"`);\n        (0,_lib_cache_js__WEBPACK_IMPORTED_MODULE_3__.setCachedTranslation)(cacheKeyContentId, field, normalizedTargetLang, translatedText);\n    } else if (translatedText && typeof translatedText === \"string\" && translatedText === text) {\n        console.log(`翻訳結果が元テキストと同じ (${field} ${cacheKeyContentId}, Key: ${cacheKey}): ${normalizedTargetLang}. API呼び出しは行われた可能性があります。`);\n        (0,_lib_cache_js__WEBPACK_IMPORTED_MODULE_3__.setCachedTranslation)(cacheKeyContentId, field, normalizedTargetLang, translatedText);\n    } else if (!translatedText || typeof translatedText !== \"string\") {\n        console.error(`翻訳失敗または結果が文字列でない (${field} ${cacheKeyContentId}, Key: ${cacheKey}): Target: ${normalizedTargetLang}, Result:`, translatedText, `. 元のテキストを返します。\"`);\n        return text;\n    } else {\n        console.error(`予期せぬ翻訳結果 (${field} ${cacheKeyContentId}, Key: ${cacheKey}): Target: ${normalizedTargetLang}. 元のテキストを返します。\"`);\n        return text;\n    }\n    return translatedText;\n}\nasync function handler(req, res) {\n    const { id } = req.query;\n    const uiLangParam = req.query.lang || \"ja\"; // フロントエンドから渡される言語パラメータ\n    const uiLang = (0,_lib_translation_js__WEBPACK_IMPORTED_MODULE_1__.ensureLangCodeFormat)(uiLangParam); // DeepLが期待する形式 (JA, ENなど) に正規化\n    if (req.method === \"GET\") {\n        try {\n            console.log(`API HANDLER: Looking for thread with ID: ${id}, Requested UI language: ${uiLang} (param: ${uiLangParam})`);\n            let threadData = await (0,_lib_dataStore_js__WEBPACK_IMPORTED_MODULE_2__.getThreadWithPosts)(id);\n            if (!threadData) {\n                console.log(`API HANDLER: Thread not found for ID: ${id}`);\n                return res.status(404).json({\n                    error: \"Thread not found\"\n                });\n            }\n            // スレッド自体の元の言語。なければ'ja'をフォールバックとするか、エラーとするかは仕様次第。\n            // ここでは'ja'をフォールバックとします。\n            const threadOriginalLangStored = threadData.lang || \"ja\";\n            const threadOriginalLang = (0,_lib_translation_js__WEBPACK_IMPORTED_MODULE_1__.ensureLangCodeFormat)(threadOriginalLangStored);\n            console.log(`API HANDLER: Thread ${id} original language: ${threadOriginalLang} (stored as ${threadOriginalLangStored})`);\n            // スレッドタイトルの翻訳\n            if (threadData.thread.title) {\n                console.log(`API HANDLER: Processing title for thread ${id}. Original: \"${threadData.thread.title.substring(0, 50)}...\", Original lang: ${threadOriginalLang}, Target UI lang: ${uiLang}`);\n                threadData.thread.title = await translateContent(threadData.thread.title, uiLang, threadOriginalLang, `thread_${id}`, \"title\");\n            } else {\n                console.log(`API HANDLER: Thread ${id} has no title to translate.`);\n            }\n            // 各投稿の本文を翻訳\n            if (threadData.posts && threadData.posts.length > 0) {\n                console.log(`API HANDLER: Processing ${threadData.posts.length} posts for thread ${id}.`);\n                threadData.posts = await Promise.all(threadData.posts.map(async (post)=>{\n                    if (!post || !post.id) {\n                        console.warn(`API HANDLER: Invalid post object found in thread ${id}, skipping.`, post);\n                        return post; // or filter it out earlier\n                    }\n                    if (!post.body) {\n                        console.log(`API HANDLER: Post ${post.id} has no body to translate.`);\n                        return post; // 本文がなければ翻訳不要\n                    }\n                    // 各投稿の元の言語 (post.original_lang がDBに保存されていることを期待)\n                    let postOriginalLangStored = post.original_lang;\n                    let postOriginalLang = null;\n                    if (postOriginalLangStored) {\n                        postOriginalLang = (0,_lib_translation_js__WEBPACK_IMPORTED_MODULE_1__.ensureLangCodeFormat)(postOriginalLangStored);\n                        console.log(`API HANDLER: Post ${post.id} original language from DB: ${postOriginalLang} (stored as ${postOriginalLangStored}) for body: \"${post.body.substring(0, 20)}...\"`);\n                    } else {\n                        // original_lang がない場合、本文から言語を検出\n                        console.log(`API HANDLER: Post ${post.id} original_lang not found in DB. Detecting from body: \"${post.body.substring(0, 20)}...\"`);\n                        try {\n                            const detected = await (0,_lib_translation_js__WEBPACK_IMPORTED_MODULE_1__.detectLang)(post.body); // detectLangはDeepL形式の言語コードを返すと期待\n                            if (detected) {\n                                postOriginalLang = (0,_lib_translation_js__WEBPACK_IMPORTED_MODULE_1__.ensureLangCodeFormat)(detected);\n                                console.log(`API HANDLER: Post ${post.id} language detected as: ${postOriginalLang}`);\n                            // ここで検出した言語をDBの post.original_lang に保存する更新処理を入れても良い (オプション)\n                            // await savePostOriginalLang(post.id, postOriginalLang);\n                            } else {\n                                // 検出失敗時はスレッドの言語にフォールバック\n                                postOriginalLang = threadOriginalLang;\n                                console.log(`API HANDLER: Post ${post.id} language detection failed, falling back to thread lang: ${postOriginalLang}`);\n                            }\n                        } catch (e) {\n                            console.error(`API HANDLER: Error detecting language for post ${post.id}, falling back to thread lang ${threadOriginalLang}. Error:`, e);\n                            postOriginalLang = threadOriginalLang;\n                        }\n                    }\n                    const translatedBody = await translateContent(post.body, uiLang, postOriginalLang, post.id, \"body\");\n                    return {\n                        ...post,\n                        body: translatedBody,\n                        original_lang: postOriginalLang,\n                        translated_to: uiLang\n                    };\n                }));\n            } else {\n                console.log(`API HANDLER: Thread ${id} has no posts to translate.`);\n            }\n            console.log(`API HANDLER: Returning thread ${id} with ${threadData.posts ? threadData.posts.length : 0} posts, processed for UI language ${uiLang}.`);\n            return res.status(200).json(threadData);\n        } catch (error) {\n            console.error(`API HANDLER: Error fetching or processing thread ${id} (UI lang: ${uiLang}). Error:`, error);\n            // エラーオブジェクト全体やスタックトレースをログに出力するとデバッグに役立つ\n            console.error(\"Error details:\", error.message, error.stack);\n            return res.status(500).json({\n                error: \"Failed to fetch or process thread data\",\n                details: error.message\n            });\n        }\n    } else {\n        console.log(`API HANDLER: Method ${req.method} not allowed for /api/threads/[id]`);\n        res.setHeader(\"Allow\", [\n            \"GET\"\n        ]); // このエンドポイントがGETのみを想定する場合\n        return res.status(405).json({\n            error: `Method ${req.method} Not Allowed`\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/threads/[id].js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fthreads%2F%5Bid%5D&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cthreads%5C%5Bid%5D.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();