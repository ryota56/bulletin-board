"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/posts";
exports.ids = ["pages/api/posts"];
exports.modules = {

/***/ "@supabase/supabase-js":
/*!****************************************!*\
  !*** external "@supabase/supabase-js" ***!
  \****************************************/
/***/ ((module) => {

module.exports = require("@supabase/supabase-js");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fposts&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cposts.js&middlewareConfigBase64=e30%3D!":
/*!****************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fposts&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cposts.js&middlewareConfigBase64=e30%3D! ***!
  \****************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_posts_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\posts.js */ \"(api)/./pages/api/posts.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_posts_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_posts_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/posts\",\n        pathname: \"/api/posts\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_posts_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRnBvc3RzJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlNUNhcGklNUNwb3N0cy5qcyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDTDtBQUMxRDtBQUNtRDtBQUNuRDtBQUNBLGlFQUFlLHdFQUFLLENBQUMsZ0RBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLGdEQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLGdIQUFtQjtBQUNsRDtBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovLzVjaC8/OWE5NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXNcXFxcYXBpXFxcXHBvc3RzLmpzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsIFwiZGVmYXVsdFwiKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsIFwiY29uZmlnXCIpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvcG9zdHNcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9wb3N0c1wiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fposts&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cposts.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./lib/dataStore.js":
/*!**************************!*\
  !*** ./lib/dataStore.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addPost: () => (/* binding */ addPost),\n/* harmony export */   addThread: () => (/* binding */ addThread),\n/* harmony export */   debugDataStore: () => (/* binding */ debugDataStore),\n/* harmony export */   getThreadWithPosts: () => (/* binding */ getThreadWithPosts),\n/* harmony export */   postsStore: () => (/* binding */ postsStore),\n/* harmony export */   threadsStore: () => (/* binding */ threadsStore)\n/* harmony export */ });\n/**\r\n * サーバーサイドで共有するデータストア\r\n * Next.jsの開発サーバーでAPIエンドポイント間でデータを共有するために使用\r\n */ // グローバル変数として保存するためのヘルパー\nif (!global.threadsStore) {\n    global.threadsStore = [\n        {\n            thread_id: \"1\",\n            title: \"サンプルスレッド1\",\n            description: \"このスレッドはサンプルです。自由に投稿してください。\",\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString(),\n            language: \"ja\"\n        },\n        {\n            thread_id: \"2\",\n            title: \"サンプルスレッド2\",\n            description: \"2つ目のサンプルスレッドです。質問や意見を投稿してください。\",\n            created_at: new Date(Date.now() - 86400000).toISOString(),\n            updated_at: new Date(Date.now() - 3600000).toISOString(),\n            language: \"ja\"\n        },\n        {\n            thread_id: \"3\",\n            title: \"プログラミングについての議論\",\n            description: \"プログラミングに関する質問や情報共有のためのスレッドです。コードの書き方や開発環境についての話題を投稿してください。\",\n            created_at: new Date(Date.now() - 172800000).toISOString(),\n            updated_at: new Date(Date.now() - 5400000).toISOString(),\n            language: \"ja\"\n        }\n    ];\n}\nif (!global.postsStore) {\n    global.postsStore = {\n        \"1\": [\n            {\n                post_id: \"1_1\",\n                thread_id: \"1\",\n                body: \"最初の投稿です\",\n                anonymous_id: \"匿名123\",\n                created_at: new Date(Date.now() - 3600000).toISOString(),\n                language: \"ja\"\n            },\n            {\n                post_id: \"1_2\",\n                thread_id: \"1\",\n                body: \"返信です\",\n                anonymous_id: \"匿名456\",\n                created_at: new Date().toISOString(),\n                language: \"ja\"\n            }\n        ],\n        \"2\": [\n            {\n                post_id: \"2_1\",\n                thread_id: \"2\",\n                body: \"別のスレッドの投稿です\",\n                anonymous_id: \"匿名789\",\n                created_at: new Date(Date.now() - 2400000).toISOString(),\n                language: \"ja\"\n            }\n        ],\n        \"3\": [\n            {\n                post_id: \"3_1\",\n                thread_id: \"3\",\n                body: \"プログラミングについて話しましょう\",\n                anonymous_id: \"匿名101\",\n                created_at: new Date(Date.now() - 172000000).toISOString(),\n                language: \"ja\"\n            }\n        ]\n    };\n}\n// スレッドデータ保存用配列をエクスポート\nconst threadsStore = global.threadsStore;\n// 投稿データ保存用オブジェクトをエクスポート\nconst postsStore = global.postsStore;\n// 新しいスレッドを追加するユーティリティ関数\nfunction addThread(thread) {\n    // 既存のスレッドを確認（重複追加防止）\n    const existingThread = threadsStore.find((t)=>t.thread_id === thread.thread_id);\n    if (!existingThread) {\n        threadsStore.push({\n            ...thread\n        }); // オブジェクトをコピーして追加\n        console.log(`スレッド追加: ID=${thread.thread_id}, タイトル=\"${thread.title}\"`);\n        console.log(\"現在のスレッド一覧:\", threadsStore.map((t)=>t.thread_id));\n    }\n}\n// 新しい投稿を追加するユーティリティ関数\nfunction addPost(threadId, post) {\n    if (!postsStore[threadId]) {\n        postsStore[threadId] = [];\n    }\n    postsStore[threadId].push({\n        id: post.post_id,\n        threadId,\n        body: post.body,\n        anonymous_id: post.anonymous_id,\n        language: post.language,\n        createdAt: post.created_at || new Date().toISOString()\n    });\n    console.log(`投稿追加: スレッドID=${threadId}, 投稿ID=${post.post_id}, 匿名ID=${post.anonymous_id}`);\n}\n// デバッグ用：データストアの内容を表示\nfunction debugDataStore() {\n    console.log(\"===== データストア内容 =====\");\n    console.log(\"スレッド数:\", threadsStore.length);\n    console.log(\"スレッドID一覧:\", threadsStore.map((t)=>t.thread_id));\n    console.log(\"投稿数:\", Object.keys(postsStore).length);\n    console.log(\"==========================\");\n}\n/**\r\n * スレッドと投稿を一度に取得\r\n * @param {string} threadId - スレッドID\r\n * @returns {object|null} スレッドと投稿の情報、見つからない場合はnull\r\n */ function getThreadWithPosts(threadId) {\n    // スレッドをメモリから取得\n    const thread = threadsStore.find((t)=>t.thread_id === threadId);\n    if (!thread) {\n        console.log(`スレッド未発見: ID=${threadId}`);\n        return null;\n    }\n    // 投稿をメモリから取得\n    const posts = postsStore[threadId] || [];\n    // 投稿データを整形\n    const formattedPosts = posts.map((post)=>({\n            id: post.post_id || post.id,\n            body: post.body,\n            anonymous_id: post.anonymous_id || \"匿名ユーザー\",\n            thread_id: post.thread_id,\n            created_at: post.created_at || post.createdAt,\n            original_lang: post.language,\n            translated_to: null // 翻訳先言語（後で設定）\n        }));\n    return {\n        thread: {\n            ...thread,\n            id: thread.thread_id\n        },\n        posts: formattedPosts,\n        lang: thread.language // スレッドの言語\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/dataStore.js\n");

/***/ }),

/***/ "(api)/./lib/deepl.js":
/*!**********************!*\
  !*** ./lib/deepl.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ deepl)\n/* harmony export */ });\n/**\r\n * DeepL API を呼び出し、翻訳済みテキストを返します。\r\n * 必ず .env.local に DEEPL_API_KEY=xxxxxxxx を設定してください。\r\n * @param {string} text        翻訳したい原文\r\n * @param {string} targetLang  例: 'EN', 'JA' など（大文字2文字）\r\n * @param {string} sourceLang  任意：原文言語 例:'JA'（空なら自動判定）\r\n * @returns {Promise<string>}  翻訳後テキスト（失敗時は原文を返す）\r\n */ async function deepl(text, targetLang, sourceLang = \"\") {\n    try {\n        if (!text || text.trim() === \"\") {\n            console.log(\"空のテキストが渡されました。原文を返します。\");\n            return text;\n        }\n        const apiKey = \"3b6926d8-d7fe-0ab5-a139-58078d395af5:fx\";\n        if (!apiKey) {\n            console.error(\"DeepL API キーが設定されていません。環境変数 DEEPL_API_KEY を確認してください。\");\n            return text;\n        }\n        // 言語コードの正規化\n        const normalizedTargetLang = targetLang.toUpperCase();\n        const normalizedSourceLang = sourceLang ? sourceLang.toUpperCase() : \"\";\n        // 同じ言語の場合は翻訳せずに返す\n        if (normalizedSourceLang && normalizedSourceLang === normalizedTargetLang) {\n            console.log(`同じ言語 (${normalizedSourceLang}) なので翻訳をスキップします。`);\n            return text;\n        }\n        // 辞書による簡易翻訳チェック (短い単語の場合)\n        if (text.length < 10) {\n            const simpleDictionary = {\n                \"犬\": {\n                    EN: \"dog\",\n                    JA: \"犬\"\n                },\n                \"猫\": {\n                    EN: \"cat\",\n                    JA: \"猫\"\n                },\n                \"dog\": {\n                    EN: \"dog\",\n                    JA: \"犬\"\n                },\n                \"cat\": {\n                    EN: \"cat\",\n                    JA: \"猫\"\n                }\n            };\n            const dictEntry = simpleDictionary[text.trim()];\n            if (dictEntry && dictEntry[normalizedTargetLang]) {\n                console.log(`辞書による翻訳: ${text} → ${dictEntry[normalizedTargetLang]}`);\n                return dictEntry[normalizedTargetLang];\n            }\n        }\n        // リクエストパラメータ\n        const params = new URLSearchParams();\n        params.append(\"auth_key\", apiKey);\n        params.append(\"text\", text);\n        params.append(\"target_lang\", normalizedTargetLang);\n        // ソース言語が指定されている場合のみ追加\n        // 重要: 同じ言語間の翻訳を避けるため、ソース言語を明示的に設定\n        if (normalizedSourceLang) {\n            params.append(\"source_lang\", normalizedSourceLang);\n        }\n        // 翻訳文のフォーマット保持設定（日本語→英語の場合は保持しない）\n        const isJaToEn = normalizedSourceLang === \"JA\" && normalizedTargetLang === \"EN\" || !normalizedSourceLang && /[\\u3040-\\u30FF\\u4E00-\\u9FFF]/.test(text) && normalizedTargetLang === \"EN\";\n        if (!isJaToEn) {\n            params.append(\"preserve_formatting\", \"1\");\n        }\n        // リクエスト送信\n        console.log(`DeepL API リクエスト: ${normalizedSourceLang || \"自動検出\"} → ${normalizedTargetLang} \"${text.slice(0, 30)}...\"`);\n        const response = await fetch(\"https://api-free.deepl.com/v2/translate\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\",\n                \"User-Agent\": \"5ch-board/1.0\"\n            },\n            body: params\n        });\n        // レスポンスチェック\n        if (!response.ok) {\n            const errorText = await response.text().catch(()=>\"\");\n            throw new Error(`DeepL API エラー: ${response.status} ${response.statusText} ${errorText}`);\n        }\n        // レスポンス解析\n        const data = await response.json();\n        if (!data.translations || data.translations.length === 0) {\n            console.warn(\"DeepL API: 翻訳結果が空です。\", {\n                text,\n                targetLang\n            });\n            return text;\n        }\n        const translatedText = data.translations[0].text;\n        const detectedSourceLang = data.translations[0].detected_source_language;\n        // 翻訳結果の検証 - 入力と出力が同じで言語が異なる場合はおかしい\n        if (translatedText.trim() === text.trim() && detectedSourceLang && normalizedTargetLang !== detectedSourceLang) {\n            console.warn(\"翻訳結果が元のテキストと同じです。2回目の試行を行います。\", {\n                detected: detectedSourceLang,\n                target: normalizedTargetLang\n            });\n            // 2回目の試行 - ソース言語を明示的に設定して再試行\n            const retryParams = new URLSearchParams();\n            retryParams.append(\"auth_key\", apiKey);\n            retryParams.append(\"text\", text);\n            retryParams.append(\"target_lang\", normalizedTargetLang);\n            retryParams.append(\"source_lang\", detectedSourceLang);\n            retryParams.append(\"preserve_formatting\", \"0\"); // フォーマット保持しない\n            const retryResponse = await fetch(\"https://api-free.deepl.com/v2/translate\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/x-www-form-urlencoded\"\n                },\n                body: retryParams\n            });\n            if (retryResponse.ok) {\n                const retryData = await retryResponse.json();\n                if (retryData.translations && retryData.translations.length > 0) {\n                    const retryText = retryData.translations[0].text;\n                    if (retryText.trim() !== text.trim()) {\n                        console.log(`再試行成功: \"${text.slice(0, 20)}...\" → \"${retryText.slice(0, 20)}...\"`);\n                        return retryText;\n                    }\n                }\n            }\n            // 万が一それでも同じなら、簡易翻訳を試す（特定の単語のみ）\n            if (/^[a-zA-Z\\s]+$/.test(text) && normalizedTargetLang === \"JA\") {\n                // 英語→日本語の簡易辞書\n                const enToJa = {\n                    \"dog\": \"犬\",\n                    \"cat\": \"猫\",\n                    \"hello\": \"こんにちは\",\n                    \"good morning\": \"おはようございます\",\n                    \"thank you\": \"ありがとう\",\n                    \"yes\": \"はい\",\n                    \"no\": \"いいえ\"\n                };\n                const lowerText = text.toLowerCase().trim();\n                if (enToJa[lowerText]) {\n                    console.log(`簡易辞書翻訳: ${text} → ${enToJa[lowerText]}`);\n                    return enToJa[lowerText];\n                }\n            } else if (/[\\u3040-\\u30FF\\u4E00-\\u9FFF]/.test(text) && normalizedTargetLang === \"EN\") {\n                // 日本語→英語の簡易辞書\n                const jaToEn = {\n                    \"犬\": \"dog\",\n                    \"猫\": \"cat\",\n                    \"こんにちは\": \"hello\",\n                    \"おはようございます\": \"good morning\",\n                    \"ありがとう\": \"thank you\",\n                    \"はい\": \"yes\",\n                    \"いいえ\": \"no\"\n                };\n                if (jaToEn[text.trim()]) {\n                    console.log(`簡易辞書翻訳: ${text} → ${jaToEn[text.trim()]}`);\n                    return jaToEn[text.trim()];\n                }\n            }\n        }\n        // デバッグログ\n        console.log(`DeepL翻訳: ${detectedSourceLang} → ${normalizedTargetLang}`, text.slice(0, 20), \"→\", translatedText.slice(0, 20));\n        return translatedText;\n    } catch (err) {\n        console.error(\"[deepl] 翻訳エラー:\", err.message, {\n            text: text.slice(0, 50),\n            targetLang\n        });\n        // ネットワークエラーの場合はフラグを立てて、後でリトライできるようにする\n        if (err.name === \"TypeError\" || err.name === \"NetworkError\" || err.message.includes(\"network\")) {\n            console.error(\"[deepl] ネットワークエラーが発生しました。後でリトライします。\");\n        }\n        return text; // 失敗した場合は原文を返す\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEdBQUc7Z0JBQzVCO1lBQ0Y7UUFDRjtRQUVBLFNBQVM7UUFDVEMsUUFBUUMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFb0MsbUJBQW1CLEdBQUcsRUFBRTlCLHFCQUFxQixDQUFDLEVBQ3BFWCxLQUFLd0IsS0FBSyxDQUFDLEdBQUcsS0FBSyxLQUFLZ0IsZUFBZWhCLEtBQUssQ0FBQyxHQUFHO1FBRWxELE9BQU9nQjtJQUNULEVBQUUsT0FBT2EsS0FBSztRQUNaakQsUUFBUU0sS0FBSyxDQUFDLGtCQUFrQjJDLElBQUlDLE9BQU8sRUFBRTtZQUFFdEQsTUFBTUEsS0FBS3dCLEtBQUssQ0FBQyxHQUFHO1lBQUt2QjtRQUFXO1FBRW5GLHNDQUFzQztRQUN0QyxJQUFJb0QsSUFBSUUsSUFBSSxLQUFLLGVBQWVGLElBQUlFLElBQUksS0FBSyxrQkFBa0JGLElBQUlDLE9BQU8sQ0FBQ0UsUUFBUSxDQUFDLFlBQVk7WUFDOUZwRCxRQUFRTSxLQUFLLENBQUM7UUFDaEI7UUFFQSxPQUFPVixNQUFNLGVBQWU7SUFDOUI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovLzVjaC8uL2xpYi9kZWVwbC5qcz9jNzc2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBEZWVwTCBBUEkg44KS5ZG844Gz5Ye644GX44CB57+76Kiz5riI44G/44OG44Kt44K544OI44KS6L+U44GX44G+44GZ44CCXHJcbiAqIOW/heOBmiAuZW52LmxvY2FsIOOBqyBERUVQTF9BUElfS0VZPXh4eHh4eHh4IOOCkuioreWumuOBl+OBpuOBj+OBoOOBleOBhOOAglxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAgICAgICAg57+76Kiz44GX44Gf44GE5Y6f5paHXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSB0YXJnZXRMYW5nICDkvos6ICdFTicsICdKQScg44Gq44Gp77yI5aSn5paH5a2XMuaWh+Wtl++8iVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc291cmNlTGFuZyAg5Lu75oSP77ya5Y6f5paH6KiA6KqeIOS+izonSkEn77yI56m644Gq44KJ6Ieq5YuV5Yik5a6a77yJXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59ICDnv7voqLPlvozjg4bjgq3jgrnjg4jvvIjlpLHmlZfmmYLjga/ljp/mlofjgpLov5TjgZnvvIlcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGRlZXBsKHRleHQsIHRhcmdldExhbmcsIHNvdXJjZUxhbmcgPSAnJykge1xyXG4gIHRyeSB7XHJcbiAgICBpZiAoIXRleHQgfHwgdGV4dC50cmltKCkgPT09ICcnKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCfnqbrjga7jg4bjgq3jgrnjg4jjgYzmuKHjgZXjgozjgb7jgZfjgZ/jgILljp/mlofjgpLov5TjgZfjgb7jgZnjgIInKTtcclxuICAgICAgcmV0dXJuIHRleHQ7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgYXBpS2V5ID0gcHJvY2Vzcy5lbnYuREVFUExfQVBJX0tFWTtcclxuICAgIGlmICghYXBpS2V5KSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0RlZXBMIEFQSSDjgq3jg7zjgYzoqK3lrprjgZXjgozjgabjgYTjgb7jgZvjgpPjgILnkrDlooPlpInmlbAgREVFUExfQVBJX0tFWSDjgpLnorroqo3jgZfjgabjgY/jgaDjgZXjgYTjgIInKTtcclxuICAgICAgcmV0dXJuIHRleHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g6KiA6Kqe44Kz44O844OJ44Gu5q2j6KaP5YyWXHJcbiAgICBjb25zdCBub3JtYWxpemVkVGFyZ2V0TGFuZyA9IHRhcmdldExhbmcudG9VcHBlckNhc2UoKTtcclxuICAgIGNvbnN0IG5vcm1hbGl6ZWRTb3VyY2VMYW5nID0gc291cmNlTGFuZyA/IHNvdXJjZUxhbmcudG9VcHBlckNhc2UoKSA6ICcnO1xyXG5cclxuICAgIC8vIOWQjOOBmOiogOiqnuOBruWgtOWQiOOBr+e/u+ios+OBm+OBmuOBq+i/lOOBmVxyXG4gICAgaWYgKG5vcm1hbGl6ZWRTb3VyY2VMYW5nICYmIG5vcm1hbGl6ZWRTb3VyY2VMYW5nID09PSBub3JtYWxpemVkVGFyZ2V0TGFuZykge1xyXG4gICAgICBjb25zb2xlLmxvZyhg5ZCM44GY6KiA6KqeICgke25vcm1hbGl6ZWRTb3VyY2VMYW5nfSkg44Gq44Gu44Gn57+76Kiz44KS44K544Kt44OD44OX44GX44G+44GZ44CCYCk7XHJcbiAgICAgIHJldHVybiB0ZXh0O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOi+nuabuOOBq+OCiOOCi+ewoeaYk+e/u+ios+ODgeOCp+ODg+OCryAo55+t44GE5Y2Y6Kqe44Gu5aC05ZCIKVxyXG4gICAgaWYgKHRleHQubGVuZ3RoIDwgMTApIHtcclxuICAgICAgY29uc3Qgc2ltcGxlRGljdGlvbmFyeSA9IHtcclxuICAgICAgICAn54qsJzogeyBFTjogJ2RvZycsIEpBOiAn54qsJyB9LFxyXG4gICAgICAgICfnjKsnOiB7IEVOOiAnY2F0JywgSkE6ICfnjKsnIH0sXHJcbiAgICAgICAgJ2RvZyc6IHsgRU46ICdkb2cnLCBKQTogJ+eKrCcgfSxcclxuICAgICAgICAnY2F0JzogeyBFTjogJ2NhdCcsIEpBOiAn54yrJyB9LFxyXG4gICAgICB9O1xyXG4gICAgICBcclxuICAgICAgY29uc3QgZGljdEVudHJ5ID0gc2ltcGxlRGljdGlvbmFyeVt0ZXh0LnRyaW0oKV07XHJcbiAgICAgIGlmIChkaWN0RW50cnkgJiYgZGljdEVudHJ5W25vcm1hbGl6ZWRUYXJnZXRMYW5nXSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGDovp7mm7jjgavjgojjgovnv7voqLM6ICR7dGV4dH0g4oaSICR7ZGljdEVudHJ5W25vcm1hbGl6ZWRUYXJnZXRMYW5nXX1gKTtcclxuICAgICAgICByZXR1cm4gZGljdEVudHJ5W25vcm1hbGl6ZWRUYXJnZXRMYW5nXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIOODquOCr+OCqOOCueODiOODkeODqeODoeODvOOCv1xyXG4gICAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xyXG4gICAgcGFyYW1zLmFwcGVuZCgnYXV0aF9rZXknLCBhcGlLZXkpO1xyXG4gICAgcGFyYW1zLmFwcGVuZCgndGV4dCcsIHRleHQpO1xyXG4gICAgcGFyYW1zLmFwcGVuZCgndGFyZ2V0X2xhbmcnLCBub3JtYWxpemVkVGFyZ2V0TGFuZyk7XHJcbiAgICBcclxuICAgIC8vIOOCveODvOOCueiogOiqnuOBjOaMh+WumuOBleOCjOOBpuOBhOOCi+WgtOWQiOOBruOBv+i/veWKoFxyXG4gICAgLy8g6YeN6KaBOiDlkIzjgZjoqIDoqp7plpPjga7nv7voqLPjgpLpgb/jgZHjgovjgZ/jgoHjgIHjgr3jg7zjgrnoqIDoqp7jgpLmmI7npLrnmoTjgavoqK3lrppcclxuICAgIGlmIChub3JtYWxpemVkU291cmNlTGFuZykge1xyXG4gICAgICBwYXJhbXMuYXBwZW5kKCdzb3VyY2VfbGFuZycsIG5vcm1hbGl6ZWRTb3VyY2VMYW5nKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDnv7voqLPmlofjga7jg5Xjgqnjg7zjg57jg4Pjg4jkv53mjIHoqK3lrprvvIjml6XmnKzoqp7ihpLoi7Hoqp7jga7loLTlkIjjga/kv53mjIHjgZfjgarjgYTvvIlcclxuICAgIGNvbnN0IGlzSmFUb0VuID0gKG5vcm1hbGl6ZWRTb3VyY2VMYW5nID09PSAnSkEnICYmIG5vcm1hbGl6ZWRUYXJnZXRMYW5nID09PSAnRU4nKSB8fCBcclxuICAgICAgICAgICAgICAgICAgICAgKCFub3JtYWxpemVkU291cmNlTGFuZyAmJiAvW1xcdTMwNDAtXFx1MzBGRlxcdTRFMDAtXFx1OUZGRl0vLnRlc3QodGV4dCkgJiYgbm9ybWFsaXplZFRhcmdldExhbmcgPT09ICdFTicpO1xyXG4gICAgXHJcbiAgICBpZiAoIWlzSmFUb0VuKSB7XHJcbiAgICAgIHBhcmFtcy5hcHBlbmQoJ3ByZXNlcnZlX2Zvcm1hdHRpbmcnLCAnMScpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOODquOCr+OCqOOCueODiOmAgeS/oVxyXG4gICAgY29uc29sZS5sb2coYERlZXBMIEFQSSDjg6rjgq/jgqjjgrnjg4g6ICR7bm9ybWFsaXplZFNvdXJjZUxhbmcgfHwgJ+iHquWLleaknOWHuid9IOKGkiAke25vcm1hbGl6ZWRUYXJnZXRMYW5nfSBcIiR7dGV4dC5zbGljZSgwLCAzMCl9Li4uXCJgKTtcclxuICAgIFxyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnaHR0cHM6Ly9hcGktZnJlZS5kZWVwbC5jb20vdjIvdHJhbnNsYXRlJywge1xyXG4gICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgaGVhZGVyczogeyBcclxuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsXHJcbiAgICAgICAgJ1VzZXItQWdlbnQnOiAnNWNoLWJvYXJkLzEuMCcsXHJcbiAgICAgIH0sXHJcbiAgICAgIGJvZHk6IHBhcmFtcyxcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIOODrOOCueODneODs+OCueODgeOCp+ODg+OCr1xyXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgICBjb25zdCBlcnJvclRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCkuY2F0Y2goKCkgPT4gJycpO1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYERlZXBMIEFQSSDjgqjjg6njg7w6ICR7cmVzcG9uc2Uuc3RhdHVzfSAke3Jlc3BvbnNlLnN0YXR1c1RleHR9ICR7ZXJyb3JUZXh0fWApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOODrOOCueODneODs+OCueino+aekFxyXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgIFxyXG4gICAgaWYgKCFkYXRhLnRyYW5zbGF0aW9ucyB8fCBkYXRhLnRyYW5zbGF0aW9ucy5sZW5ndGggPT09IDApIHtcclxuICAgICAgY29uc29sZS53YXJuKCdEZWVwTCBBUEk6IOe/u+ios+e1kOaenOOBjOepuuOBp+OBmeOAgicsIHsgdGV4dCwgdGFyZ2V0TGFuZyB9KTtcclxuICAgICAgcmV0dXJuIHRleHQ7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNvbnN0IHRyYW5zbGF0ZWRUZXh0ID0gZGF0YS50cmFuc2xhdGlvbnNbMF0udGV4dDtcclxuICAgIGNvbnN0IGRldGVjdGVkU291cmNlTGFuZyA9IGRhdGEudHJhbnNsYXRpb25zWzBdLmRldGVjdGVkX3NvdXJjZV9sYW5ndWFnZTtcclxuICAgIFxyXG4gICAgLy8g57+76Kiz57WQ5p6c44Gu5qSc6Ki8IC0g5YWl5Yqb44Go5Ye65Yqb44GM5ZCM44GY44Gn6KiA6Kqe44GM55Ww44Gq44KL5aC05ZCI44Gv44GK44GL44GX44GEXHJcbiAgICBpZiAodHJhbnNsYXRlZFRleHQudHJpbSgpID09PSB0ZXh0LnRyaW0oKSAmJiBcclxuICAgICAgICBkZXRlY3RlZFNvdXJjZUxhbmcgJiYgbm9ybWFsaXplZFRhcmdldExhbmcgIT09IGRldGVjdGVkU291cmNlTGFuZykge1xyXG4gICAgICBjb25zb2xlLndhcm4oJ+e/u+ios+e1kOaenOOBjOWFg+OBruODhuOCreOCueODiOOBqOWQjOOBmOOBp+OBmeOAgjLlm57nm67jga7oqabooYzjgpLooYzjgYTjgb7jgZnjgIInLCBcclxuICAgICAgICAgICAgICAgICAgeyBkZXRlY3RlZDogZGV0ZWN0ZWRTb3VyY2VMYW5nLCB0YXJnZXQ6IG5vcm1hbGl6ZWRUYXJnZXRMYW5nIH0pO1xyXG4gICAgICBcclxuICAgICAgLy8gMuWbnuebruOBruippuihjCAtIOOCveODvOOCueiogOiqnuOCkuaYjuekuueahOOBq+ioreWumuOBl+OBpuWGjeippuihjFxyXG4gICAgICBjb25zdCByZXRyeVBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcclxuICAgICAgcmV0cnlQYXJhbXMuYXBwZW5kKCdhdXRoX2tleScsIGFwaUtleSk7XHJcbiAgICAgIHJldHJ5UGFyYW1zLmFwcGVuZCgndGV4dCcsIHRleHQpO1xyXG4gICAgICByZXRyeVBhcmFtcy5hcHBlbmQoJ3RhcmdldF9sYW5nJywgbm9ybWFsaXplZFRhcmdldExhbmcpO1xyXG4gICAgICByZXRyeVBhcmFtcy5hcHBlbmQoJ3NvdXJjZV9sYW5nJywgZGV0ZWN0ZWRTb3VyY2VMYW5nKTtcclxuICAgICAgcmV0cnlQYXJhbXMuYXBwZW5kKCdwcmVzZXJ2ZV9mb3JtYXR0aW5nJywgJzAnKTsgLy8g44OV44Kp44O844Oe44OD44OI5L+d5oyB44GX44Gq44GEXHJcbiAgICAgIFxyXG4gICAgICBjb25zdCByZXRyeVJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJ2h0dHBzOi8vYXBpLWZyZWUuZGVlcGwuY29tL3YyL3RyYW5zbGF0ZScsIHtcclxuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyB9LFxyXG4gICAgICAgIGJvZHk6IHJldHJ5UGFyYW1zLFxyXG4gICAgICB9KTtcclxuICAgICAgXHJcbiAgICAgIGlmIChyZXRyeVJlc3BvbnNlLm9rKSB7XHJcbiAgICAgICAgY29uc3QgcmV0cnlEYXRhID0gYXdhaXQgcmV0cnlSZXNwb25zZS5qc29uKCk7XHJcbiAgICAgICAgaWYgKHJldHJ5RGF0YS50cmFuc2xhdGlvbnMgJiYgcmV0cnlEYXRhLnRyYW5zbGF0aW9ucy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICBjb25zdCByZXRyeVRleHQgPSByZXRyeURhdGEudHJhbnNsYXRpb25zWzBdLnRleHQ7XHJcbiAgICAgICAgICBpZiAocmV0cnlUZXh0LnRyaW0oKSAhPT0gdGV4dC50cmltKCkpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYOWGjeippuihjOaIkOWKnzogXCIke3RleHQuc2xpY2UoMCwgMjApfS4uLlwiIOKGkiBcIiR7cmV0cnlUZXh0LnNsaWNlKDAsIDIwKX0uLi5cImApO1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0cnlUZXh0O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgLy8g5LiH44GM5LiA44Gd44KM44Gn44KC5ZCM44GY44Gq44KJ44CB57Ch5piT57+76Kiz44KS6Kmm44GZ77yI54m55a6a44Gu5Y2Y6Kqe44Gu44G/77yJXHJcbiAgICAgIGlmICgvXlthLXpBLVpcXHNdKyQvLnRlc3QodGV4dCkgJiYgbm9ybWFsaXplZFRhcmdldExhbmcgPT09ICdKQScpIHtcclxuICAgICAgICAvLyDoi7Hoqp7ihpLml6XmnKzoqp7jga7nsKHmmJPovp7mm7hcclxuICAgICAgICBjb25zdCBlblRvSmEgPSB7XHJcbiAgICAgICAgICAnZG9nJzogJ+eKrCcsXHJcbiAgICAgICAgICAnY2F0JzogJ+eMqycsXHJcbiAgICAgICAgICAnaGVsbG8nOiAn44GT44KT44Gr44Gh44GvJyxcclxuICAgICAgICAgICdnb29kIG1vcm5pbmcnOiAn44GK44Gv44KI44GG44GU44GW44GE44G+44GZJyxcclxuICAgICAgICAgICd0aGFuayB5b3UnOiAn44GC44KK44GM44Go44GGJyxcclxuICAgICAgICAgICd5ZXMnOiAn44Gv44GEJyxcclxuICAgICAgICAgICdubyc6ICfjgYTjgYTjgYgnXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBsb3dlclRleHQgPSB0ZXh0LnRvTG93ZXJDYXNlKCkudHJpbSgpO1xyXG4gICAgICAgIGlmIChlblRvSmFbbG93ZXJUZXh0XSkge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coYOewoeaYk+i+nuabuOe/u+ioszogJHt0ZXh0fSDihpIgJHtlblRvSmFbbG93ZXJUZXh0XX1gKTtcclxuICAgICAgICAgIHJldHVybiBlblRvSmFbbG93ZXJUZXh0XTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSBpZiAoL1tcXHUzMDQwLVxcdTMwRkZcXHU0RTAwLVxcdTlGRkZdLy50ZXN0KHRleHQpICYmIG5vcm1hbGl6ZWRUYXJnZXRMYW5nID09PSAnRU4nKSB7XHJcbiAgICAgICAgLy8g5pel5pys6Kqe4oaS6Iux6Kqe44Gu57Ch5piT6L6e5pu4XHJcbiAgICAgICAgY29uc3QgamFUb0VuID0ge1xyXG4gICAgICAgICAgJ+eKrCc6ICdkb2cnLFxyXG4gICAgICAgICAgJ+eMqyc6ICdjYXQnLFxyXG4gICAgICAgICAgJ+OBk+OCk+OBq+OBoeOBryc6ICdoZWxsbycsXHJcbiAgICAgICAgICAn44GK44Gv44KI44GG44GU44GW44GE44G+44GZJzogJ2dvb2QgbW9ybmluZycsXHJcbiAgICAgICAgICAn44GC44KK44GM44Go44GGJzogJ3RoYW5rIHlvdScsXHJcbiAgICAgICAgICAn44Gv44GEJzogJ3llcycsXHJcbiAgICAgICAgICAn44GE44GE44GIJzogJ25vJ1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKGphVG9Fblt0ZXh0LnRyaW0oKV0pIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGDnsKHmmJPovp7mm7jnv7voqLM6ICR7dGV4dH0g4oaSICR7amFUb0VuW3RleHQudHJpbSgpXX1gKTtcclxuICAgICAgICAgIHJldHVybiBqYVRvRW5bdGV4dC50cmltKCldO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyDjg4fjg5Djg4PjgrDjg63jgrBcclxuICAgIGNvbnNvbGUubG9nKGBEZWVwTOe/u+ioszogJHtkZXRlY3RlZFNvdXJjZUxhbmd9IOKGkiAke25vcm1hbGl6ZWRUYXJnZXRMYW5nfWAsIFxyXG4gICAgICB0ZXh0LnNsaWNlKDAsIDIwKSwgJ+KGkicsIHRyYW5zbGF0ZWRUZXh0LnNsaWNlKDAsIDIwKSk7XHJcbiAgICBcclxuICAgIHJldHVybiB0cmFuc2xhdGVkVGV4dDtcclxuICB9IGNhdGNoIChlcnIpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ1tkZWVwbF0g57+76Kiz44Ko44Op44O8OicsIGVyci5tZXNzYWdlLCB7IHRleHQ6IHRleHQuc2xpY2UoMCwgNTApLCB0YXJnZXRMYW5nIH0pO1xyXG4gICAgXHJcbiAgICAvLyDjg43jg4Pjg4jjg6/jg7zjgq/jgqjjg6njg7zjga7loLTlkIjjga/jg5Xjg6njgrDjgpLnq4vjgabjgabjgIHlvozjgafjg6rjg4jjg6njgqTjgafjgY3jgovjgojjgYbjgavjgZnjgotcclxuICAgIGlmIChlcnIubmFtZSA9PT0gJ1R5cGVFcnJvcicgfHwgZXJyLm5hbWUgPT09ICdOZXR3b3JrRXJyb3InIHx8IGVyci5tZXNzYWdlLmluY2x1ZGVzKCduZXR3b3JrJykpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignW2RlZXBsXSDjg43jg4Pjg4jjg6/jg7zjgq/jgqjjg6njg7zjgYznmbrnlJ/jgZfjgb7jgZfjgZ/jgILlvozjgafjg6rjg4jjg6njgqTjgZfjgb7jgZnjgIInKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIHRleHQ7IC8vIOWkseaVl+OBl+OBn+WgtOWQiOOBr+WOn+aWh+OCkui/lOOBmVxyXG4gIH1cclxufSAiXSwibmFtZXMiOlsiZGVlcGwiLCJ0ZXh0IiwidGFyZ2V0TGFuZyIsInNvdXJjZUxhbmciLCJ0cmltIiwiY29uc29sZSIsImxvZyIsImFwaUtleSIsInByb2Nlc3MiLCJlbnYiLCJERUVQTF9BUElfS0VZIiwiZXJyb3IiLCJub3JtYWxpemVkVGFyZ2V0TGFuZyIsInRvVXBwZXJDYXNlIiwibm9ybWFsaXplZFNvdXJjZUxhbmciLCJsZW5ndGgiLCJzaW1wbGVEaWN0aW9uYXJ5IiwiRU4iLCJKQSIsImRpY3RFbnRyeSIsInBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsImFwcGVuZCIsImlzSmFUb0VuIiwidGVzdCIsInNsaWNlIiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJib2R5Iiwib2siLCJlcnJvclRleHQiLCJjYXRjaCIsIkVycm9yIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImRhdGEiLCJqc29uIiwidHJhbnNsYXRpb25zIiwid2FybiIsInRyYW5zbGF0ZWRUZXh0IiwiZGV0ZWN0ZWRTb3VyY2VMYW5nIiwiZGV0ZWN0ZWRfc291cmNlX2xhbmd1YWdlIiwiZGV0ZWN0ZWQiLCJ0YXJnZXQiLCJyZXRyeVBhcmFtcyIsInJldHJ5UmVzcG9uc2UiLCJyZXRyeURhdGEiLCJyZXRyeVRleHQiLCJlblRvSmEiLCJsb3dlclRleHQiLCJ0b0xvd2VyQ2FzZSIsImphVG9FbiIsImVyciIsIm1lc3NhZ2UiLCJuYW1lIiwiaW5jbHVkZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./lib/deepl.js\n");

/***/ }),

/***/ "(api)/./lib/langUtil.js":
/*!*************************!*\
  !*** ./lib/langUtil.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   detectLang: () => (/* binding */ detectLang),\n/* harmony export */   dictionaryLookup: () => (/* binding */ dictionaryLookup),\n/* harmony export */   manualDict: () => (/* binding */ manualDict),\n/* harmony export */   mapLang: () => (/* binding */ mapLang),\n/* harmony export */   oppositeLang: () => (/* binding */ oppositeLang)\n/* harmony export */ });\n// ── 言語ユーティリティ ────────────────────────────────\nconst jaChar = /[\\u3000-\\u303F\\u3040-\\u309F\\u30A0-\\u30FF\\u4E00-\\u9FFF]/;\nconst detectLang = (t = \"\")=>jaChar.test(t) ? \"JA\" : \"EN\";\nconst oppositeLang = (l)=>l === \"JA\" ? \"EN\" : \"JA\";\nconst mapLang = (l = \"\")=>l.toLowerCase().startsWith(\"en\") ? \"EN\" : l.toLowerCase().startsWith(\"ja\") ? \"JA\" : l.toUpperCase();\nconst manualDict = {\n    \"犬\": \"dog\",\n    \"猫\": \"cat\",\n    \"dog\": \"犬\",\n    \"cat\": \"猫\"\n};\nconst dictionaryLookup = (text, target)=>{\n    const hit = manualDict[text.trim()];\n    if (!hit) return null;\n    return target === \"EN\" ? hit : Object.keys(manualDict).find((k)=>manualDict[k] === text.trim()) || null;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvbGFuZ1V0aWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxnREFBZ0Q7QUFDaEQsTUFBTUEsU0FBUztBQUNSLE1BQU1DLGFBQWEsQ0FBQ0MsSUFBSSxFQUFFLEdBQU1GLE9BQU9HLElBQUksQ0FBQ0QsS0FBSyxPQUFPLEtBQU07QUFDOUQsTUFBTUUsZUFBZSxDQUFDQyxJQUFPQSxNQUFNLE9BQU8sT0FBTyxLQUFNO0FBQ3ZELE1BQU1DLFVBQVUsQ0FBQ0QsSUFBSSxFQUFFLEdBQzVCQSxFQUFFRSxXQUFXLEdBQUdDLFVBQVUsQ0FBQyxRQUFRLE9BQ2pDSCxFQUFFRSxXQUFXLEdBQUdDLFVBQVUsQ0FBQyxRQUFRLE9BQ25DSCxFQUFFSSxXQUFXLEdBQUc7QUFFYixNQUFNQyxhQUFhO0lBQ3hCLEtBQUs7SUFBUSxLQUFLO0lBQ2xCLE9BQU87SUFBTSxPQUFPO0FBQ3RCLEVBQUU7QUFFSyxNQUFNQyxtQkFBbUIsQ0FBQ0MsTUFBTUM7SUFDckMsTUFBTUMsTUFBTUosVUFBVSxDQUFDRSxLQUFLRyxJQUFJLEdBQUc7SUFDbkMsSUFBSSxDQUFDRCxLQUFLLE9BQU87SUFDakIsT0FBT0QsV0FBVyxPQUFPQyxNQUFNRSxPQUFPQyxJQUFJLENBQUNQLFlBQ3hDUSxJQUFJLENBQUNDLENBQUFBLElBQUtULFVBQVUsQ0FBQ1MsRUFBRSxLQUFLUCxLQUFLRyxJQUFJLE9BQU87QUFDakQsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovLzVjaC8uL2xpYi9sYW5nVXRpbC5qcz9mMTM4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIOKUgOKUgCDoqIDoqp7jg6bjg7zjg4bjgqPjg6rjg4bjgqMg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAXHJcbmNvbnN0IGphQ2hhciA9IC9bXFx1MzAwMC1cXHUzMDNGXFx1MzA0MC1cXHUzMDlGXFx1MzBBMC1cXHUzMEZGXFx1NEUwMC1cXHU5RkZGXS87XHJcbmV4cG9ydCBjb25zdCBkZXRlY3RMYW5nID0gKHQgPSAnJykgPT4gKGphQ2hhci50ZXN0KHQpID8gJ0pBJyA6ICdFTicpO1xyXG5leHBvcnQgY29uc3Qgb3Bwb3NpdGVMYW5nID0gKGwpID0+IChsID09PSAnSkEnID8gJ0VOJyA6ICdKQScpO1xyXG5leHBvcnQgY29uc3QgbWFwTGFuZyA9IChsID0gJycpID0+XHJcbiAgbC50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoJ2VuJykgPyAnRU4nXHJcbiAgOiBsLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aCgnamEnKSA/ICdKQSdcclxuICA6IGwudG9VcHBlckNhc2UoKTtcclxuXHJcbmV4cG9ydCBjb25zdCBtYW51YWxEaWN0ID0ge1xyXG4gICfniqwnOiAnZG9nJywgICfnjKsnOiAnY2F0JyxcclxuICAnZG9nJzogJ+eKrCcsICAnY2F0JzogJ+eMqycsXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZGljdGlvbmFyeUxvb2t1cCA9ICh0ZXh0LCB0YXJnZXQpID0+IHtcclxuICBjb25zdCBoaXQgPSBtYW51YWxEaWN0W3RleHQudHJpbSgpXTtcclxuICBpZiAoIWhpdCkgcmV0dXJuIG51bGw7XHJcbiAgcmV0dXJuIHRhcmdldCA9PT0gJ0VOJyA/IGhpdCA6IE9iamVjdC5rZXlzKG1hbnVhbERpY3QpXHJcbiAgICAuZmluZChrID0+IG1hbnVhbERpY3Rba10gPT09IHRleHQudHJpbSgpKSB8fCBudWxsO1xyXG59OyAiXSwibmFtZXMiOlsiamFDaGFyIiwiZGV0ZWN0TGFuZyIsInQiLCJ0ZXN0Iiwib3Bwb3NpdGVMYW5nIiwibCIsIm1hcExhbmciLCJ0b0xvd2VyQ2FzZSIsInN0YXJ0c1dpdGgiLCJ0b1VwcGVyQ2FzZSIsIm1hbnVhbERpY3QiLCJkaWN0aW9uYXJ5TG9va3VwIiwidGV4dCIsInRhcmdldCIsImhpdCIsInRyaW0iLCJPYmplY3QiLCJrZXlzIiwiZmluZCIsImsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./lib/langUtil.js\n");

/***/ }),

/***/ "(api)/./lib/supabaseClient.js":
/*!*******************************!*\
  !*** ./lib/supabaseClient.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   supabase: () => (/* binding */ supabase)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"@supabase/supabase-js\");\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__);\n\nconst url = process.env.NEXT_PUBLIC_SUPABASE_URL;\nconst key = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || process.env.SUPABASE_SERVICE_ROLE_KEY;\nconst supabase = url && key ? (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(url, key) // 本番・Preview では実接続\n : {\n    from: ()=>({\n            select: ()=>({\n                    eq: ()=>({\n                            single: async ()=>({\n                                    data: null,\n                                    error: null\n                                })\n                        })\n                }),\n            upsert: ()=>({\n                    select: ()=>({\n                            single: async ()=>({\n                                    data: null,\n                                    error: null\n                                })\n                        })\n                }),\n            insert: ()=>({\n                    select: ()=>({\n                            single: async ()=>({\n                                    data: null,\n                                    error: null\n                                })\n                        })\n                })\n        }),\n    channel: ()=>({\n            on: ()=>({\n                    subscribe: ()=>({\n                            unsubscribe: ()=>{}\n                        })\n                })\n        })\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvc3VwYWJhc2VDbGllbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFEO0FBRXJELE1BQU1DLE1BQU1DLFFBQVFDLEdBQUcsQ0FBQ0Msd0JBQXdCO0FBQ2hELE1BQU1DLE1BQ0pILFFBQVFDLEdBQUcsQ0FBQ0csNkJBQTZCLElBQ3pDSixRQUFRQyxHQUFHLENBQUNJLHlCQUF5QjtBQUVoQyxNQUFNQyxXQUNYUCxPQUFPSSxNQUNITCxtRUFBWUEsQ0FBQ0MsS0FBS0ksS0FBWSxtQkFBbUI7R0FDakQ7SUFDRUksTUFBTSxJQUFPO1lBQ1hDLFFBQVEsSUFBTztvQkFBRUMsSUFBSSxJQUFPOzRCQUFFQyxRQUFRLFVBQWE7b0NBQUVDLE1BQU07b0NBQU1DLE9BQU87Z0NBQUs7d0JBQUc7Z0JBQUc7WUFDbkZDLFFBQVEsSUFBTztvQkFDYkwsUUFBUSxJQUFPOzRCQUFFRSxRQUFRLFVBQWE7b0NBQUVDLE1BQU07b0NBQU1DLE9BQU87Z0NBQUs7d0JBQUc7Z0JBQ3JFO1lBQ0FFLFFBQVEsSUFBTztvQkFBRU4sUUFBUSxJQUFPOzRCQUFFRSxRQUFRLFVBQWE7b0NBQUVDLE1BQU07b0NBQU1DLE9BQU87Z0NBQUs7d0JBQUc7Z0JBQUc7UUFDekY7SUFDQUcsU0FBUyxJQUFPO1lBQUVDLElBQUksSUFBTztvQkFBRUMsV0FBVyxJQUFPOzRCQUFFQyxhQUFhLEtBQU87d0JBQUU7Z0JBQUc7UUFBRztBQUNqRixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vNWNoLy4vbGliL3N1cGFiYXNlQ2xpZW50LmpzPzVmMGQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlQ2xpZW50IH0gZnJvbSAnQHN1cGFiYXNlL3N1cGFiYXNlLWpzJztcclxuXHJcbmNvbnN0IHVybCA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTDtcclxuY29uc3Qga2V5ID1cclxuICBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSB8fFxyXG4gIHByb2Nlc3MuZW52LlNVUEFCQVNFX1NFUlZJQ0VfUk9MRV9LRVk7XHJcblxyXG5leHBvcnQgY29uc3Qgc3VwYWJhc2UgPVxyXG4gIHVybCAmJiBrZXlcclxuICAgID8gY3JlYXRlQ2xpZW50KHVybCwga2V5KSAgICAgICAgLy8g5pys55Wq44O7UHJldmlldyDjgafjga/lrp/mjqXntppcclxuICAgIDogeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g44Ot44O844Kr44Or6ZaL55m644Gn44Gv44Oi44OD44KvXHJcbiAgICAgICAgZnJvbTogKCkgPT4gKHtcclxuICAgICAgICAgIHNlbGVjdDogKCkgPT4gKHsgZXE6ICgpID0+ICh7IHNpbmdsZTogYXN5bmMgKCkgPT4gKHsgZGF0YTogbnVsbCwgZXJyb3I6IG51bGwgfSkgfSkgfSksXHJcbiAgICAgICAgICB1cHNlcnQ6ICgpID0+ICh7XHJcbiAgICAgICAgICAgIHNlbGVjdDogKCkgPT4gKHsgc2luZ2xlOiBhc3luYyAoKSA9PiAoeyBkYXRhOiBudWxsLCBlcnJvcjogbnVsbCB9KSB9KSxcclxuICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgaW5zZXJ0OiAoKSA9PiAoeyBzZWxlY3Q6ICgpID0+ICh7IHNpbmdsZTogYXN5bmMgKCkgPT4gKHsgZGF0YTogbnVsbCwgZXJyb3I6IG51bGwgfSkgfSkgfSksXHJcbiAgICAgICAgfSksXHJcbiAgICAgICAgY2hhbm5lbDogKCkgPT4gKHsgb246ICgpID0+ICh7IHN1YnNjcmliZTogKCkgPT4gKHsgdW5zdWJzY3JpYmU6ICgpID0+IHt9IH0pIH0pIH0pLFxyXG4gICAgICB9OyAiXSwibmFtZXMiOlsiY3JlYXRlQ2xpZW50IiwidXJsIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCIsImtleSIsIk5FWFRfUFVCTElDX1NVUEFCQVNFX0FOT05fS0VZIiwiU1VQQUJBU0VfU0VSVklDRV9ST0xFX0tFWSIsInN1cGFiYXNlIiwiZnJvbSIsInNlbGVjdCIsImVxIiwic2luZ2xlIiwiZGF0YSIsImVycm9yIiwidXBzZXJ0IiwiaW5zZXJ0IiwiY2hhbm5lbCIsIm9uIiwic3Vic2NyaWJlIiwidW5zdWJzY3JpYmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./lib/supabaseClient.js\n");

/***/ }),

/***/ "(api)/./lib/translation.js":
/*!****************************!*\
  !*** ./lib/translation.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ensureLangCodeFormat: () => (/* binding */ ensureLangCodeFormat),\n/* harmony export */   getTranslation: () => (/* binding */ getTranslation),\n/* harmony export */   saveTranslation: () => (/* binding */ saveTranslation),\n/* harmony export */   translateText: () => (/* binding */ translateText),\n/* harmony export */   translateWithDeepL: () => (/* binding */ translateWithDeepL)\n/* harmony export */ });\n/* harmony import */ var _deepl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deepl.js */ \"(api)/./lib/deepl.js\");\n/* harmony import */ var _supabaseClient_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./supabaseClient.js */ \"(api)/./lib/supabaseClient.js\");\n/* harmony import */ var _langUtil_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./langUtil.js */ \"(api)/./lib/langUtil.js\");\n/* harmony import */ var _dataStore_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dataStore.js */ \"(api)/./lib/dataStore.js\");\n\n\n\n\n// 日本語文字を含むか簡易判定\nconst jpRegex = /[\\u3000-\\u303F\\u3040-\\u309F\\u30A0-\\u30FF\\u4E00-\\u9FFF]/;\nconst detectSourceLang = (t = \"\")=>jpRegex.test(t) ? \"JA\" : \"EN\";\n// DeepL API設定\nconst DEEPL_API_KEY = \"3b6926d8-d7fe-0ab5-a139-58078d395af5:fx\";\n/**\r\n * 言語コードを正規化する（DeepLに適した形式に変換する）\r\n * @param {string} langCode - 言語コード（ja, en, JA, EN など）\r\n * @returns {string} 正規化された言語コード（JA, ENなど）\r\n */ function ensureLangCodeFormat(langCode = \"\") {\n    if (!langCode) return \"JA\"; // デフォルト値\n    // すでに正しい形式（JA, EN）であれば、そのまま返す\n    if (langCode === \"JA\" || langCode === \"EN\") {\n        return langCode;\n    }\n    // 小文字を大文字に変換\n    return langCode.toLowerCase().startsWith(\"ja\") ? \"JA\" : langCode.toLowerCase().startsWith(\"en\") ? \"EN\" : langCode.toUpperCase(); // その他の言語コードはそのまま大文字に\n}\n/**\r\n * DeepL APIを使用してテキストを翻訳する\r\n * @param {object} params - パラメータ\r\n * @param {string|string[]} params.text - 翻訳するテキストまたはテキストの配列\r\n * @param {string} params.targetLang - ターゲット言語コード（'EN'または'JA'）\r\n * @returns {Promise<string>} - 翻訳されたテキスト\r\n */ async function translateWithDeepL({ text, targetLang }) {\n    if (!text) return \"\";\n    if (!DEEPL_API_KEY) {\n        console.error(\"DeepL API キーが設定されていません。\");\n        return Array.isArray(text) ? text[0] || \"\" : text; // APIキーがない場合は原文を返す\n    }\n    // 言語コードの正規化\n    const normalizedTargetLang = (0,_langUtil_js__WEBPACK_IMPORTED_MODULE_2__.mapLang)(targetLang);\n    // ① 前処理 ― トリム・連続ピリオド整理（改行は保持）\n    const cleaned = Array.isArray(text) ? text[0] : text;\n    const cleanedText = cleaned// .replace(/\\r?\\n+/g, ' ')   // 改行を半角スペースに変換する処理を削除\n    .replace(/\\.{3,}/g, \"...\") // ピリオド 3 個を超える部分は 3 個に\n    .trim();\n    if (!cleanedText) return \"\";\n    // 短いテキストの場合は辞書を使った直接翻訳を試みる\n    if (cleanedText.length < 10) {\n        const simpleDict = {\n            \"犬\": {\n                en: \"dog\",\n                ja: \"犬\"\n            },\n            \"猫\": {\n                en: \"cat\",\n                ja: \"猫\"\n            },\n            \"dog\": {\n                en: \"dog\",\n                ja: \"犬\"\n            },\n            \"cat\": {\n                en: \"cat\",\n                ja: \"猫\"\n            },\n            \"hello\": {\n                en: \"hello\",\n                ja: \"こんにちは\"\n            },\n            \"yes\": {\n                en: \"yes\",\n                ja: \"はい\"\n            },\n            \"no\": {\n                en: \"no\",\n                ja: \"いいえ\"\n            }\n        };\n        const dictKey = cleanedText.toLowerCase().trim();\n        const dictEntry = simpleDict[dictKey];\n        if (dictEntry) {\n            const targetLangCode = normalizedTargetLang.toLowerCase() === \"en\" ? \"en\" : \"ja\";\n            const translated = dictEntry[targetLangCode];\n            if (translated && translated !== cleanedText) {\n                console.log(`辞書翻訳: \"${cleanedText}\" → \"${translated}\"`);\n                return translated;\n            }\n        }\n    }\n    try {\n        // ソース言語を検出（日本語文字が含まれるかどうか）\n        const detectedSourceLang = detectSourceLang(cleanedText);\n        // 同じ言語への翻訳は避ける\n        if (detectedSourceLang.toLowerCase() === normalizedTargetLang.toLowerCase()) {\n            console.log(`同じ言語への翻訳をスキップ: ${detectedSourceLang}`);\n            return cleanedText;\n        }\n        console.log(`DeepL翻訳リクエスト: \"${cleanedText.slice(0, 20)}...\" (${detectedSourceLang} → ${normalizedTargetLang})`);\n        // DeepL API呼び出し関数（内部用）\n        async function callDeeplApi(reqText, keepFormatting = true) {\n            try {\n                // Deepl 関数を直接呼び出し\n                const results = await (0,_deepl_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(reqText, normalizedTargetLang, detectedSourceLang // ソース言語を明示的に指定\n                );\n                // 文字列として結果を返す\n                return results || reqText;\n            } catch (err) {\n                console.error(\"DeepL API 呼び出しエラー:\", err.message);\n                return reqText; // エラー時は原文を返す\n            }\n        }\n        // ① １回目の翻訳試行\n        const first = await callDeeplApi(cleanedText, true);\n        // ② 翻訳結果が原文と同じかチェック\n        if (first.trim() === cleanedText.trim()) {\n            console.log(\"翻訳結果が原文と同じです。別の方法で再試行します。\");\n            // 単語辞書で再確認\n            const dictWords = {\n                \"犬\": \"dog\",\n                \"猫\": \"cat\",\n                \"こんにちは\": \"hello\",\n                \"おはよう\": \"good morning\",\n                \"ありがとう\": \"thank you\",\n                \"dog\": \"犬\",\n                \"cat\": \"猫\",\n                \"hello\": \"こんにちは\",\n                \"good morning\": \"おはよう\",\n                \"thank you\": \"ありがとう\"\n            };\n            if (dictWords[cleanedText]) {\n                const dictResult = dictWords[cleanedText];\n                console.log(`辞書による再翻訳: \"${cleanedText}\" → \"${dictResult}\"`);\n                return dictResult;\n            }\n            // フォーマット維持なしで再試行\n            const retry = await callDeeplApi(cleanedText, false);\n            if (retry.trim() !== cleanedText.trim()) {\n                console.log(`フォーマット維持なしで翻訳成功: \"${cleanedText}\" → \"${retry}\"`);\n                return retry;\n            }\n            // それでも同じならソース言語を変えて試す最後の手段\n            const forcedSourceLang = detectedSourceLang === \"JA\" ? \"EN\" : \"JA\";\n            console.log(`最終試行: ソース言語を強制的に ${forcedSourceLang} に設定`);\n            try {\n                const results = await (0,_deepl_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(cleanedText, normalizedTargetLang, forcedSourceLang);\n                const final = results || cleanedText;\n                if (final.trim() !== cleanedText.trim()) {\n                    console.log(`最終試行成功: \"${cleanedText}\" → \"${final}\"`);\n                    return final;\n                }\n            } catch (finalError) {\n                console.error(\"最終翻訳試行エラー:\", finalError);\n            }\n            console.log(\"全ての翻訳試行が失敗しました。原文を返します。\");\n            return cleanedText;\n        }\n        console.log(`翻訳成功: \"${cleanedText.slice(0, 20)}...\" → \"${first.slice(0, 20)}...\"`);\n        return first;\n    } catch (error) {\n        console.error(\"translateWithDeepL エラー:\", error);\n        return cleanedText; // エラー時は原文を返す\n    }\n}\n/**\r\n * DeepL で翻訳し、翻訳テキストを返す\r\n * cleaned: 末尾の「...」などを除去した本文\r\n * @param {string} cleaned - 翻訳するテキスト\r\n * @param {string} targetLang - 翻訳先言語コード\r\n * @param {string|null} sourceLang - 翻訳元言語コード（オプション）\r\n * @returns {Promise<string>} - 翻訳されたテキスト（文字列）\r\n */ async function translateText(cleaned, targetLang, sourceLang = null) {\n    if (!cleaned) return \"\";\n    if (!DEEPL_API_KEY) {\n        console.error(\"DeepL API キーが設定されていません。\");\n        return cleaned; // APIキーがない場合は原文を返す\n    }\n    try {\n        // 言語コードの正規化\n        const normalizedTargetLang = (0,_langUtil_js__WEBPACK_IMPORTED_MODULE_2__.mapLang)(targetLang);\n        //   0: 全体, 1: 本体, 2: 末尾記号\n        const [, core = \"\", trailer = \"\"] = cleaned.match(/^(.*?)([\\u0021-\\u002E\\u3001-\\u303F\\uFF01-\\uFF0F\\u2026]+)?$/u) || [];\n        const text = core || cleaned.trim();\n        if (!text) return cleaned;\n        // ソース言語を検出\n        const effectiveSourceLang = sourceLang ? (0,_langUtil_js__WEBPACK_IMPORTED_MODULE_2__.mapLang)(sourceLang) : detectSourceLang(text);\n        // 同じ言語への翻訳は避ける\n        if (effectiveSourceLang.toLowerCase() === normalizedTargetLang.toLowerCase()) {\n            console.log(`同じ言語への翻訳をスキップ: ${effectiveSourceLang}`);\n            return cleaned;\n        }\n        // まず辞書検索を試す\n        const dictResult = translateWithDictionary(text, normalizedTargetLang);\n        if (dictResult) {\n            console.log(`辞書翻訳成功: \"${text.slice(0, 20)}...\" → \"${dictResult.slice(0, 20)}...\"`);\n            return dictResult + trailer;\n        }\n        // DeepL API呼び出し\n        console.log(`翻訳リクエスト: ${effectiveSourceLang} → ${normalizedTargetLang}`, text.slice(0, 20));\n        const translatedResults = await (0,_deepl_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(text, normalizedTargetLang, effectiveSourceLang);\n        // deepl関数は配列ではなく文字列を返すようになったので、そのまま使用\n        const translatedText = translatedResults || text;\n        // 翻訳結果 + 元の末尾記号を結合\n        const result = (translatedText + trailer).trim();\n        // 翻訳結果が原文と同じ場合は辞書を再確認\n        if (result.trim() === text.trim() + trailer.trim()) {\n            console.log(\"翻訳結果が原文と同じです。強制的に翻訳を試みます。\");\n            // 強制的に反対言語に設定して再試行\n            const forcedSourceLang = effectiveSourceLang === \"JA\" ? \"EN\" : \"JA\";\n            const forcedResults = await (0,_deepl_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(text, normalizedTargetLang, forcedSourceLang);\n            // 配列ではなく文字列を使用\n            const forcedResult = forcedResults || text;\n            if (forcedResult.trim() !== text.trim()) {\n                console.log(`強制翻訳成功: \"${text.slice(0, 20)}...\" → \"${forcedResult.slice(0, 20)}...\"`);\n                return (forcedResult + trailer).trim();\n            }\n            return result; // 失敗した場合はDeepLの結果をそのまま返す\n        }\n        return result;\n    } catch (error) {\n        console.error(\"translateText エラー:\", error);\n        return cleaned; // エラー時は原文を返す\n    }\n}\n/**\r\n * 簡易辞書を使った翻訳\r\n * @param {string} text - 翻訳するテキスト\r\n * @param {string} targetLang - 対象言語\r\n * @returns {string|null} - 翻訳結果、辞書にない場合はnull\r\n */ function translateWithDictionary(text, targetLang) {\n    const simpleDictionary = {\n        // 日本語→英語\n        \"犬\": \"dog\",\n        \"猫\": \"cat\",\n        \"こんにちは\": \"hello\",\n        \"おはよう\": \"good morning\",\n        \"ありがとう\": \"thank you\",\n        \"はい\": \"yes\",\n        \"いいえ\": \"no\",\n        // 英語→日本語\n        \"dog\": \"犬\",\n        \"cat\": \"猫\",\n        \"hello\": \"こんにちは\",\n        \"good morning\": \"おはよう\",\n        \"thank you\": \"ありがとう\",\n        \"yes\": \"はい\",\n        \"no\": \"いいえ\"\n    };\n    const normalizedText = text.trim().toLowerCase();\n    if (simpleDictionary[normalizedText]) {\n        const isENTarget = targetLang.toUpperCase() === \"EN\";\n        const isJAText = /[\\u3040-\\u30FF\\u4E00-\\u9FFF]/.test(normalizedText);\n        // 日本語→英語 または 英語→日本語の方向が合っている場合のみ翻訳\n        if (isENTarget && isJAText || !isENTarget && !isJAText) {\n            return simpleDictionary[normalizedText];\n        }\n    }\n    return null;\n}\n/* ------------------------------------------------------------------------\r\n * ★ 重要: saveTranslation は \"sourceId を必須\" に一本化する\r\n *   - thread でも post でも ID をそのまま sourceId に渡す\r\n *   - 呼び出し側ロジックを単純化\r\n * --------------------------------------------------------------------- */ async function saveTranslation({ sourceId, field, lang, text }) {\n    if (!sourceId || !field || !lang || !text) {\n        console.error(\"saveTranslation: 引数が不足しています\", {\n            sourceId,\n            field,\n            lang,\n            text\n        });\n        return {\n            success: false,\n            error: \"引数が不足しています\"\n        };\n    }\n    try {\n        // 言語コードの正規化\n        const normalizedLang = lang.toLowerCase();\n        const row = {\n            source_id: sourceId,\n            field,\n            language: normalizedLang,\n            translated_content: text,\n            created_at: new Date().toISOString()\n        };\n        // Supabase が null ならメモリだけで動かす\n        if (!_supabaseClient_js__WEBPACK_IMPORTED_MODULE_1__.supabase) {\n            console.log(\"翻訳保存 [mock]:\", sourceId, field, normalizedLang, text.slice(0, 20));\n            return {\n                success: true\n            };\n        }\n        const { error } = await _supabaseClient_js__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"translations\").upsert(row, {\n            onConflict: \"source_id,field,language\"\n        });\n        if (error) {\n            console.error(\"翻訳保存エラー:\", error);\n            return {\n                success: false,\n                error\n            };\n        }\n        console.log(\"翻訳保存成功:\", sourceId, field, normalizedLang, text.slice(0, 20));\n        return {\n            success: true\n        };\n    } catch (error) {\n        console.error(\"saveTranslation エラー:\", error);\n        return {\n            success: false,\n            error\n        };\n    }\n}\n/* -------------------------------------------------------------------- */ async function getTranslation(sourceId, field, lang) {\n    if (!sourceId || !field || !lang) {\n        console.error(\"getTranslation: 引数が不足しています\", {\n            sourceId,\n            field,\n            lang\n        });\n        return null;\n    }\n    try {\n        // 言語コードの正規化\n        const normalizedLang = lang.toLowerCase();\n        if (!_supabaseClient_js__WEBPACK_IMPORTED_MODULE_1__.supabase) {\n            console.log(\"翻訳取得 [mock]:\", sourceId, field, normalizedLang);\n            return null;\n        }\n        const { data, error } = await _supabaseClient_js__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"translations\").select(\"translated_content, created_at\").eq(\"source_id\", sourceId).eq(\"field\", field).eq(\"language\", normalizedLang).single();\n        if (error) {\n            // データが見つからない場合はエラーにしない\n            if (error.code === \"PGRST116\") {\n                return null;\n            }\n            console.error(\"翻訳取得エラー:\", error);\n            return null;\n        }\n        console.log(\"翻訳取得成功:\", sourceId, field, normalizedLang, data.translated_content.slice(0, 20));\n        return data.translated_content;\n    } catch (error) {\n        console.error(\"getTranslation エラー:\", error);\n        return null;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/translation.js\n");

/***/ }),

/***/ "(api)/./pages/api/posts.js":
/*!****************************!*\
  !*** ./pages/api/posts.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_supabaseClient_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/supabaseClient.js */ \"(api)/./lib/supabaseClient.js\");\n/* harmony import */ var _lib_translation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/translation.js */ \"(api)/./lib/translation.js\");\n/* harmony import */ var _lib_dataStore_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/dataStore.js */ \"(api)/./lib/dataStore.js\");\n/* harmony import */ var _lib_langUtil_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/langUtil.js */ \"(api)/./lib/langUtil.js\");\n\n\n\n\n// UI 言語コード (ja/en) → DeepL 用2桁 (JA/EN)\nconst mapLang = (l = \"\")=>l.toLowerCase().startsWith(\"en\") ? \"EN\" : l.toLowerCase().startsWith(\"ja\") ? \"JA\" : l.toUpperCase();\n// APIルートハンドラー実行時にデータストアの内容を確認\ntry {\n    (0,_lib_dataStore_js__WEBPACK_IMPORTED_MODULE_2__.debugDataStore)();\n} catch (error) {\n    console.error(\"データストア初期化エラー:\", error);\n}\n// posts APIからthreads APIにデータを取得するユーティリティ\nasync function getThreadsData() {\n    try {\n        // 共有データストアから直接取得\n        return {\n            threads: _lib_dataStore_js__WEBPACK_IMPORTED_MODULE_2__.threadsStore\n        };\n    } catch (error) {\n        console.error(\"Error accessing threads data:\", error);\n    }\n    return {\n        threads: []\n    };\n}\n// スレッド情報を取得するユーティリティ\nasync function getThreadById(threadId) {\n    // 共有データストアから直接取得\n    const thread = _lib_dataStore_js__WEBPACK_IMPORTED_MODULE_2__.threadsStore.find((t)=>t.thread_id === threadId);\n    if (thread) {\n        return {\n            thread,\n            posts: _lib_dataStore_js__WEBPACK_IMPORTED_MODULE_2__.postsStore[threadId] || []\n        };\n    }\n    return null;\n}\nasync function handler(req, res) {\n    const { method } = req;\n    switch(method){\n        case \"POST\":\n            try {\n                const { threadId, body, anonymousId } = req.body;\n                const uiLang = (req.query.lang || req.body.uiLang || \"ja\").toLowerCase(); // UI が渡す言語\n                console.log(`投稿リクエスト: threadId=${threadId}, uiLang=${uiLang}, body長さ=${body?.length}`);\n                if (!threadId || !body) {\n                    return res.status(400).json({\n                        error: \"Thread ID and body are required\"\n                    });\n                }\n                // スレッドの存在を確認\n                const threadData = await getThreadById(threadId);\n                if (!threadData || !threadData.thread) {\n                    // スレッド一覧からも確認\n                    const allThreadsData = await getThreadsData();\n                    const thread = allThreadsData.threads.find((t)=>t.thread_id === threadId);\n                    if (!thread) {\n                        return res.status(404).json({\n                            error: \"Thread not found\"\n                        });\n                    }\n                    // 見つかったスレッドをローカルに追加\n                    (0,_lib_dataStore_js__WEBPACK_IMPORTED_MODULE_2__.addThread)(thread);\n                }\n                // ユーザーID（匿名）- クライアントからのIDは使わず、毎回新しく生成\n                const userId = `匿名${Math.floor(Math.random() * 1000)}`;\n                // 投稿の言語を検出\n                let detected = \"\";\n                try {\n                    // DeepL に一度投げて元言語を判定\n                    const deeplRes = await (0,_lib_translation_js__WEBPACK_IMPORTED_MODULE_1__.translateWithDeepL)({\n                        text: body,\n                        targetLang: \"JA\"\n                    });\n                    const detectedRaw = deeplRes?.detected_source_language;\n                    const fallback = /[\\u3040-\\u30FF\\u4E00-\\u9FFF]/.test(body) ? \"ja\" : \"en\";\n                    detected = (detectedRaw || fallback).toLowerCase();\n                    console.log(`投稿言語検出: ${detected}`);\n                } catch (error) {\n                    console.error(\"言語検出エラー:\", error);\n                    // エラー時はテキストの簡易検出を行う\n                    detected = /[\\u3040-\\u30FF\\u4E00-\\u9FFF]/.test(body) ? \"ja\" : \"en\";\n                }\n                // 1) 原文はそのまま保存（改行を含む）\n                const postId = `${threadId}_${Date.now()}`;\n                const newPost = {\n                    post_id: postId,\n                    thread_id: threadId,\n                    body: body,\n                    anonymous_id: userId,\n                    created_at: new Date().toISOString(),\n                    language: detected\n                };\n                // 投稿を保存\n                (0,_lib_dataStore_js__WEBPACK_IMPORTED_MODULE_2__.addPost)(threadId, newPost);\n                // 2) UI 言語向けに翻訳してキャッシュ\n                const srcLang = detected.toUpperCase() === \"JA\" ? \"JA\" : \"EN\";\n                const translationNeeded = uiLang !== detected;\n                let translatedText = body;\n                let translationLang = detected;\n                if (translationNeeded) {\n                    // 翻訳が必要な場合は翻訳を実行\n                    const targetLang = uiLang === \"en\" ? \"EN\" : \"JA\";\n                    translationLang = uiLang;\n                    console.log(`投稿翻訳実行: ${srcLang} → ${targetLang}`);\n                    try {\n                        // まず辞書で検索\n                        const dict = (0,_lib_langUtil_js__WEBPACK_IMPORTED_MODULE_3__.dictionaryLookup)(body, targetLang);\n                        if (dict) {\n                            translatedText = dict;\n                            console.log(`辞書翻訳成功: \"${body}\" → \"${translatedText}\"`);\n                        } else {\n                            // DeepL翻訳実行\n                            translatedText = await (0,_lib_translation_js__WEBPACK_IMPORTED_MODULE_1__.translateText)(body, targetLang);\n                            console.log(`API翻訳成功: \"${body.slice(0, 20)}...\" → \"${translatedText.slice(0, 20)}...\"`);\n                        }\n                        // 翻訳をキャッシュに保存\n                        await (0,_lib_translation_js__WEBPACK_IMPORTED_MODULE_1__.saveTranslation)({\n                            sourceId: postId,\n                            field: \"body\",\n                            lang: uiLang,\n                            text: translatedText\n                        });\n                        // メモリキャッシュも更新\n                        const postInStore = _lib_dataStore_js__WEBPACK_IMPORTED_MODULE_2__.postsStore[threadId]?.find((p)=>p.post_id === postId);\n                        if (postInStore) {\n                            postInStore[`body_${uiLang}`] = translatedText;\n                        }\n                    } catch (error) {\n                        console.error(\"翻訳エラー:\", error);\n                        // 翻訳エラー時は原文を使用\n                        translatedText = body;\n                    }\n                } else {\n                    console.log(\"翻訳スキップ: UIと投稿が同じ言語\");\n                }\n                // 3) 反対言語の翻訳も常に生成してキャッシュする\n                try {\n                    const oppositeUiLang = uiLang === \"en\" ? \"ja\" : \"en\";\n                    const oppositeTargetLang = oppositeUiLang === \"en\" ? \"EN\" : \"JA\";\n                    // 投稿言語と反対言語が異なる場合のみ翻訳\n                    if (detected !== oppositeUiLang) {\n                        console.log(`反対言語翻訳: ${srcLang} → ${oppositeTargetLang}`);\n                        // 辞書検索\n                        const dict = (0,_lib_langUtil_js__WEBPACK_IMPORTED_MODULE_3__.dictionaryLookup)(body, oppositeTargetLang);\n                        if (dict) {\n                            console.log(`反対言語辞書翻訳: \"${body}\" → \"${dict}\"`);\n                            await (0,_lib_translation_js__WEBPACK_IMPORTED_MODULE_1__.saveTranslation)({\n                                sourceId: postId,\n                                field: \"body\",\n                                lang: oppositeUiLang,\n                                text: dict\n                            });\n                            // メモリキャッシュも更新\n                            const postInStore = _lib_dataStore_js__WEBPACK_IMPORTED_MODULE_2__.postsStore[threadId]?.find((p)=>p.post_id === postId);\n                            if (postInStore) {\n                                postInStore[`body_${oppositeUiLang}`] = dict;\n                            }\n                        } else {\n                            // DeepL翻訳\n                            const oppositeTranslated = await (0,_lib_translation_js__WEBPACK_IMPORTED_MODULE_1__.translateText)(body, oppositeTargetLang);\n                            await (0,_lib_translation_js__WEBPACK_IMPORTED_MODULE_1__.saveTranslation)({\n                                sourceId: postId,\n                                field: \"body\",\n                                lang: oppositeUiLang,\n                                text: oppositeTranslated\n                            });\n                            // メモリキャッシュも更新\n                            const postInStore = _lib_dataStore_js__WEBPACK_IMPORTED_MODULE_2__.postsStore[threadId]?.find((p)=>p.post_id === postId);\n                            if (postInStore) {\n                                postInStore[`body_${oppositeUiLang}`] = oppositeTranslated;\n                            }\n                        }\n                    }\n                } catch (error) {\n                    console.error(\"反対言語翻訳エラー:\", error);\n                // エラーは無視して続行\n                }\n                // スレッドの更新日時を更新\n                const threadToUpdate = _lib_dataStore_js__WEBPACK_IMPORTED_MODULE_2__.threadsStore.find((t)=>t.thread_id === threadId);\n                if (threadToUpdate) {\n                    threadToUpdate.updated_at = new Date().toISOString();\n                }\n                // 3) レスポンスに翻訳結果も含める\n                const response = {\n                    ...newPost,\n                    translated: translationNeeded ? {\n                        body: translatedText,\n                        language: translationLang\n                    } : null\n                };\n                console.log(`投稿成功: ID=${postId}`);\n                return res.status(201).json(response);\n            } catch (error) {\n                console.error(\"Error creating post:\", error);\n                return res.status(500).json({\n                    error: \"Internal Server Error\"\n                });\n            }\n            break;\n        default:\n            res.setHeader(\"Allow\", [\n                \"POST\"\n            ]);\n            return res.status(405).json({\n                error: `Method ${method} Not Allowed`\n            });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/posts.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fposts&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cposts.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();